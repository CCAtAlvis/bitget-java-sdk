/*
 * Bitget Open API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bitget.openapi.api;

import com.bitget.openapi.ApiCallback;
import com.bitget.openapi.ApiClient;
import com.bitget.openapi.ApiException;
import com.bitget.openapi.ApiResponse;
import com.bitget.openapi.Configuration;
import com.bitget.openapi.Pair;
import com.bitget.openapi.ProgressRequestBody;
import com.bitget.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.bitget.openapi.model.ApiResponseResultOfMarginBatchCancelOrderResult;
import com.bitget.openapi.model.ApiResponseResultOfMarginBatchPlaceOrderResult;
import com.bitget.openapi.model.ApiResponseResultOfMarginOpenOrderInfoResult;
import com.bitget.openapi.model.ApiResponseResultOfMarginPlaceOrderResult;
import com.bitget.openapi.model.ApiResponseResultOfMarginTradeDetailInfoResult;
import com.bitget.openapi.model.ApiResponseResultOfVoid;
import com.bitget.openapi.model.MarginBatchCancelOrderRequest;
import com.bitget.openapi.model.MarginBatchOrdersRequest;
import com.bitget.openapi.model.MarginCancelOrderRequest;
import com.bitget.openapi.model.MarginOrderRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MarginIsolatedOrderApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MarginIsolatedOrderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MarginIsolatedOrderApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for marginIsolatedBatchCancelOrder
     * @param marginBatchCancelOrderRequest marginBatchCancelOrderRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedBatchCancelOrderCall(MarginBatchCancelOrderRequest marginBatchCancelOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = marginBatchCancelOrderRequest;

        // create path and map variables
        String localVarPath = "/api/margin/v1/isolated/order/batchCancelOrder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ACCESS_KEY", "ACCESS_PASSPHRASE", "ACCESS_SIGN", "ACCESS_TIMESTAMP", "SECRET_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marginIsolatedBatchCancelOrderValidateBeforeCall(MarginBatchCancelOrderRequest marginBatchCancelOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marginBatchCancelOrderRequest' is set
        if (marginBatchCancelOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'marginBatchCancelOrderRequest' when calling marginIsolatedBatchCancelOrder(Async)");
        }

        return marginIsolatedBatchCancelOrderCall(marginBatchCancelOrderRequest, _callback);

    }

    /**
     * batchCancelOrder
     * Margin Isolated BatchCancelOrder
     * @param marginBatchCancelOrderRequest marginBatchCancelOrderRequest (required)
     * @return ApiResponseResultOfMarginBatchCancelOrderResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseResultOfMarginBatchCancelOrderResult marginIsolatedBatchCancelOrder(MarginBatchCancelOrderRequest marginBatchCancelOrderRequest) throws ApiException {
        ApiResponse<ApiResponseResultOfMarginBatchCancelOrderResult> localVarResp = marginIsolatedBatchCancelOrderWithHttpInfo(marginBatchCancelOrderRequest);
        return localVarResp.getData();
    }

    /**
     * batchCancelOrder
     * Margin Isolated BatchCancelOrder
     * @param marginBatchCancelOrderRequest marginBatchCancelOrderRequest (required)
     * @return ApiResponse&lt;ApiResponseResultOfMarginBatchCancelOrderResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseResultOfMarginBatchCancelOrderResult> marginIsolatedBatchCancelOrderWithHttpInfo(MarginBatchCancelOrderRequest marginBatchCancelOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = marginIsolatedBatchCancelOrderValidateBeforeCall(marginBatchCancelOrderRequest, null);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginBatchCancelOrderResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * batchCancelOrder (asynchronously)
     * Margin Isolated BatchCancelOrder
     * @param marginBatchCancelOrderRequest marginBatchCancelOrderRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedBatchCancelOrderAsync(MarginBatchCancelOrderRequest marginBatchCancelOrderRequest, final ApiCallback<ApiResponseResultOfMarginBatchCancelOrderResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = marginIsolatedBatchCancelOrderValidateBeforeCall(marginBatchCancelOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginBatchCancelOrderResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marginIsolatedBatchPlaceOrder
     * @param marginOrderRequest marginOrderRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedBatchPlaceOrderCall(MarginBatchOrdersRequest marginOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = marginOrderRequest;

        // create path and map variables
        String localVarPath = "/api/margin/v1/isolated/order/batchPlaceOrder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ACCESS_KEY", "ACCESS_PASSPHRASE", "ACCESS_SIGN", "ACCESS_TIMESTAMP", "SECRET_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marginIsolatedBatchPlaceOrderValidateBeforeCall(MarginBatchOrdersRequest marginOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marginOrderRequest' is set
        if (marginOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'marginOrderRequest' when calling marginIsolatedBatchPlaceOrder(Async)");
        }

        return marginIsolatedBatchPlaceOrderCall(marginOrderRequest, _callback);

    }

    /**
     * batchPlaceOrder
     * Margin Isolated PlaceOrder
     * @param marginOrderRequest marginOrderRequest (required)
     * @return ApiResponseResultOfMarginBatchPlaceOrderResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseResultOfMarginBatchPlaceOrderResult marginIsolatedBatchPlaceOrder(MarginBatchOrdersRequest marginOrderRequest) throws ApiException {
        ApiResponse<ApiResponseResultOfMarginBatchPlaceOrderResult> localVarResp = marginIsolatedBatchPlaceOrderWithHttpInfo(marginOrderRequest);
        return localVarResp.getData();
    }

    /**
     * batchPlaceOrder
     * Margin Isolated PlaceOrder
     * @param marginOrderRequest marginOrderRequest (required)
     * @return ApiResponse&lt;ApiResponseResultOfMarginBatchPlaceOrderResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseResultOfMarginBatchPlaceOrderResult> marginIsolatedBatchPlaceOrderWithHttpInfo(MarginBatchOrdersRequest marginOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = marginIsolatedBatchPlaceOrderValidateBeforeCall(marginOrderRequest, null);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginBatchPlaceOrderResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * batchPlaceOrder (asynchronously)
     * Margin Isolated PlaceOrder
     * @param marginOrderRequest marginOrderRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedBatchPlaceOrderAsync(MarginBatchOrdersRequest marginOrderRequest, final ApiCallback<ApiResponseResultOfMarginBatchPlaceOrderResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = marginIsolatedBatchPlaceOrderValidateBeforeCall(marginOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginBatchPlaceOrderResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marginIsolatedCancelOrder
     * @param marginCancelOrderRequest marginCancelOrderRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedCancelOrderCall(MarginCancelOrderRequest marginCancelOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = marginCancelOrderRequest;

        // create path and map variables
        String localVarPath = "/api/margin/v1/isolated/order/cancelOrder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ACCESS_KEY", "ACCESS_PASSPHRASE", "ACCESS_SIGN", "ACCESS_TIMESTAMP", "SECRET_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marginIsolatedCancelOrderValidateBeforeCall(MarginCancelOrderRequest marginCancelOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marginCancelOrderRequest' is set
        if (marginCancelOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'marginCancelOrderRequest' when calling marginIsolatedCancelOrder(Async)");
        }

        return marginIsolatedCancelOrderCall(marginCancelOrderRequest, _callback);

    }

    /**
     * cancelOrder
     * Margin Isolated CancelOrder
     * @param marginCancelOrderRequest marginCancelOrderRequest (required)
     * @return ApiResponseResultOfMarginBatchCancelOrderResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseResultOfMarginBatchCancelOrderResult marginIsolatedCancelOrder(MarginCancelOrderRequest marginCancelOrderRequest) throws ApiException {
        ApiResponse<ApiResponseResultOfMarginBatchCancelOrderResult> localVarResp = marginIsolatedCancelOrderWithHttpInfo(marginCancelOrderRequest);
        return localVarResp.getData();
    }

    /**
     * cancelOrder
     * Margin Isolated CancelOrder
     * @param marginCancelOrderRequest marginCancelOrderRequest (required)
     * @return ApiResponse&lt;ApiResponseResultOfMarginBatchCancelOrderResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseResultOfMarginBatchCancelOrderResult> marginIsolatedCancelOrderWithHttpInfo(MarginCancelOrderRequest marginCancelOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = marginIsolatedCancelOrderValidateBeforeCall(marginCancelOrderRequest, null);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginBatchCancelOrderResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * cancelOrder (asynchronously)
     * Margin Isolated CancelOrder
     * @param marginCancelOrderRequest marginCancelOrderRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedCancelOrderAsync(MarginCancelOrderRequest marginCancelOrderRequest, final ApiCallback<ApiResponseResultOfMarginBatchCancelOrderResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = marginIsolatedCancelOrderValidateBeforeCall(marginCancelOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginBatchCancelOrderResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marginIsolatedFills
     * @param startTime startTime (required)
     * @param symbol symbol (optional)
     * @param endTime endTime (optional)
     * @param orderId orderId (optional)
     * @param lastFillId lastFillId (optional)
     * @param pageSize pageSize (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedFillsCall(String startTime, String symbol, String endTime, String orderId, String lastFillId, String pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/margin/v1/isolated/order/fills";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (symbol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("symbol", symbol));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderId", orderId));
        }

        if (lastFillId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastFillId", lastFillId));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ACCESS_KEY", "ACCESS_PASSPHRASE", "ACCESS_SIGN", "ACCESS_TIMESTAMP", "SECRET_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marginIsolatedFillsValidateBeforeCall(String startTime, String symbol, String endTime, String orderId, String lastFillId, String pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling marginIsolatedFills(Async)");
        }

        return marginIsolatedFillsCall(startTime, symbol, endTime, orderId, lastFillId, pageSize, _callback);

    }

    /**
     * fills
     * Margin Isolated Fills
     * @param startTime startTime (required)
     * @param symbol symbol (optional)
     * @param endTime endTime (optional)
     * @param orderId orderId (optional)
     * @param lastFillId lastFillId (optional)
     * @param pageSize pageSize (optional)
     * @return ApiResponseResultOfMarginTradeDetailInfoResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseResultOfMarginTradeDetailInfoResult marginIsolatedFills(String startTime, String symbol, String endTime, String orderId, String lastFillId, String pageSize) throws ApiException {
        ApiResponse<ApiResponseResultOfMarginTradeDetailInfoResult> localVarResp = marginIsolatedFillsWithHttpInfo(startTime, symbol, endTime, orderId, lastFillId, pageSize);
        return localVarResp.getData();
    }

    /**
     * fills
     * Margin Isolated Fills
     * @param startTime startTime (required)
     * @param symbol symbol (optional)
     * @param endTime endTime (optional)
     * @param orderId orderId (optional)
     * @param lastFillId lastFillId (optional)
     * @param pageSize pageSize (optional)
     * @return ApiResponse&lt;ApiResponseResultOfMarginTradeDetailInfoResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseResultOfMarginTradeDetailInfoResult> marginIsolatedFillsWithHttpInfo(String startTime, String symbol, String endTime, String orderId, String lastFillId, String pageSize) throws ApiException {
        okhttp3.Call localVarCall = marginIsolatedFillsValidateBeforeCall(startTime, symbol, endTime, orderId, lastFillId, pageSize, null);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginTradeDetailInfoResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * fills (asynchronously)
     * Margin Isolated Fills
     * @param startTime startTime (required)
     * @param symbol symbol (optional)
     * @param endTime endTime (optional)
     * @param orderId orderId (optional)
     * @param lastFillId lastFillId (optional)
     * @param pageSize pageSize (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedFillsAsync(String startTime, String symbol, String endTime, String orderId, String lastFillId, String pageSize, final ApiCallback<ApiResponseResultOfMarginTradeDetailInfoResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = marginIsolatedFillsValidateBeforeCall(startTime, symbol, endTime, orderId, lastFillId, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginTradeDetailInfoResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marginIsolatedHistoryOrders
     * @param startTime startTime (required)
     * @param symbol symbol (optional)
     * @param source source (optional)
     * @param endTime endTime (optional)
     * @param orderId orderId (optional)
     * @param clientOid clientOid (optional)
     * @param pageSize pageSize (optional)
     * @param minId minId (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedHistoryOrdersCall(String startTime, String symbol, String source, String endTime, String orderId, String clientOid, String pageSize, String minId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/margin/v1/isolated/order/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (symbol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("symbol", symbol));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderId", orderId));
        }

        if (clientOid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientOid", clientOid));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (minId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minId", minId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ACCESS_KEY", "ACCESS_PASSPHRASE", "ACCESS_SIGN", "ACCESS_TIMESTAMP", "SECRET_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marginIsolatedHistoryOrdersValidateBeforeCall(String startTime, String symbol, String source, String endTime, String orderId, String clientOid, String pageSize, String minId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling marginIsolatedHistoryOrders(Async)");
        }

        return marginIsolatedHistoryOrdersCall(startTime, symbol, source, endTime, orderId, clientOid, pageSize, minId, _callback);

    }

    /**
     * history
     * Margin Isolated historyOrders
     * @param startTime startTime (required)
     * @param symbol symbol (optional)
     * @param source source (optional)
     * @param endTime endTime (optional)
     * @param orderId orderId (optional)
     * @param clientOid clientOid (optional)
     * @param pageSize pageSize (optional)
     * @param minId minId (optional)
     * @return ApiResponseResultOfMarginOpenOrderInfoResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseResultOfMarginOpenOrderInfoResult marginIsolatedHistoryOrders(String startTime, String symbol, String source, String endTime, String orderId, String clientOid, String pageSize, String minId) throws ApiException {
        ApiResponse<ApiResponseResultOfMarginOpenOrderInfoResult> localVarResp = marginIsolatedHistoryOrdersWithHttpInfo(startTime, symbol, source, endTime, orderId, clientOid, pageSize, minId);
        return localVarResp.getData();
    }

    /**
     * history
     * Margin Isolated historyOrders
     * @param startTime startTime (required)
     * @param symbol symbol (optional)
     * @param source source (optional)
     * @param endTime endTime (optional)
     * @param orderId orderId (optional)
     * @param clientOid clientOid (optional)
     * @param pageSize pageSize (optional)
     * @param minId minId (optional)
     * @return ApiResponse&lt;ApiResponseResultOfMarginOpenOrderInfoResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseResultOfMarginOpenOrderInfoResult> marginIsolatedHistoryOrdersWithHttpInfo(String startTime, String symbol, String source, String endTime, String orderId, String clientOid, String pageSize, String minId) throws ApiException {
        okhttp3.Call localVarCall = marginIsolatedHistoryOrdersValidateBeforeCall(startTime, symbol, source, endTime, orderId, clientOid, pageSize, minId, null);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginOpenOrderInfoResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * history (asynchronously)
     * Margin Isolated historyOrders
     * @param startTime startTime (required)
     * @param symbol symbol (optional)
     * @param source source (optional)
     * @param endTime endTime (optional)
     * @param orderId orderId (optional)
     * @param clientOid clientOid (optional)
     * @param pageSize pageSize (optional)
     * @param minId minId (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedHistoryOrdersAsync(String startTime, String symbol, String source, String endTime, String orderId, String clientOid, String pageSize, String minId, final ApiCallback<ApiResponseResultOfMarginOpenOrderInfoResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = marginIsolatedHistoryOrdersValidateBeforeCall(startTime, symbol, source, endTime, orderId, clientOid, pageSize, minId, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginOpenOrderInfoResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marginIsolatedOpenOrders
     * @param symbol symbol (required)
     * @param startTime startTime (required)
     * @param endTime endTime (optional)
     * @param orderId orderId (optional)
     * @param clientOid clientOid (optional)
     * @param pageSize pageSize (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedOpenOrdersCall(String symbol, String startTime, String endTime, String orderId, String clientOid, String pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/margin/v1/isolated/order/openOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (symbol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("symbol", symbol));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderId", orderId));
        }

        if (clientOid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientOid", clientOid));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ACCESS_KEY", "ACCESS_PASSPHRASE", "ACCESS_SIGN", "ACCESS_TIMESTAMP", "SECRET_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marginIsolatedOpenOrdersValidateBeforeCall(String symbol, String startTime, String endTime, String orderId, String clientOid, String pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling marginIsolatedOpenOrders(Async)");
        }

        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling marginIsolatedOpenOrders(Async)");
        }

        return marginIsolatedOpenOrdersCall(symbol, startTime, endTime, orderId, clientOid, pageSize, _callback);

    }

    /**
     * openOrders
     * Margin Isolated openOrders
     * @param symbol symbol (required)
     * @param startTime startTime (required)
     * @param endTime endTime (optional)
     * @param orderId orderId (optional)
     * @param clientOid clientOid (optional)
     * @param pageSize pageSize (optional)
     * @return ApiResponseResultOfMarginOpenOrderInfoResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseResultOfMarginOpenOrderInfoResult marginIsolatedOpenOrders(String symbol, String startTime, String endTime, String orderId, String clientOid, String pageSize) throws ApiException {
        ApiResponse<ApiResponseResultOfMarginOpenOrderInfoResult> localVarResp = marginIsolatedOpenOrdersWithHttpInfo(symbol, startTime, endTime, orderId, clientOid, pageSize);
        return localVarResp.getData();
    }

    /**
     * openOrders
     * Margin Isolated openOrders
     * @param symbol symbol (required)
     * @param startTime startTime (required)
     * @param endTime endTime (optional)
     * @param orderId orderId (optional)
     * @param clientOid clientOid (optional)
     * @param pageSize pageSize (optional)
     * @return ApiResponse&lt;ApiResponseResultOfMarginOpenOrderInfoResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseResultOfMarginOpenOrderInfoResult> marginIsolatedOpenOrdersWithHttpInfo(String symbol, String startTime, String endTime, String orderId, String clientOid, String pageSize) throws ApiException {
        okhttp3.Call localVarCall = marginIsolatedOpenOrdersValidateBeforeCall(symbol, startTime, endTime, orderId, clientOid, pageSize, null);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginOpenOrderInfoResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * openOrders (asynchronously)
     * Margin Isolated openOrders
     * @param symbol symbol (required)
     * @param startTime startTime (required)
     * @param endTime endTime (optional)
     * @param orderId orderId (optional)
     * @param clientOid clientOid (optional)
     * @param pageSize pageSize (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedOpenOrdersAsync(String symbol, String startTime, String endTime, String orderId, String clientOid, String pageSize, final ApiCallback<ApiResponseResultOfMarginOpenOrderInfoResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = marginIsolatedOpenOrdersValidateBeforeCall(symbol, startTime, endTime, orderId, clientOid, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginOpenOrderInfoResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marginIsolatedPlaceOrder
     * @param marginOrderRequest marginOrderRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedPlaceOrderCall(MarginOrderRequest marginOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = marginOrderRequest;

        // create path and map variables
        String localVarPath = "/api/margin/v1/isolated/order/placeOrder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ACCESS_KEY", "ACCESS_PASSPHRASE", "ACCESS_SIGN", "ACCESS_TIMESTAMP", "SECRET_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marginIsolatedPlaceOrderValidateBeforeCall(MarginOrderRequest marginOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marginOrderRequest' is set
        if (marginOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'marginOrderRequest' when calling marginIsolatedPlaceOrder(Async)");
        }

        return marginIsolatedPlaceOrderCall(marginOrderRequest, _callback);

    }

    /**
     * placeOrder
     * Margin Isolated PlaceOrder
     * @param marginOrderRequest marginOrderRequest (required)
     * @return ApiResponseResultOfMarginPlaceOrderResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseResultOfMarginPlaceOrderResult marginIsolatedPlaceOrder(MarginOrderRequest marginOrderRequest) throws ApiException {
        ApiResponse<ApiResponseResultOfMarginPlaceOrderResult> localVarResp = marginIsolatedPlaceOrderWithHttpInfo(marginOrderRequest);
        return localVarResp.getData();
    }

    /**
     * placeOrder
     * Margin Isolated PlaceOrder
     * @param marginOrderRequest marginOrderRequest (required)
     * @return ApiResponse&lt;ApiResponseResultOfMarginPlaceOrderResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseResultOfMarginPlaceOrderResult> marginIsolatedPlaceOrderWithHttpInfo(MarginOrderRequest marginOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = marginIsolatedPlaceOrderValidateBeforeCall(marginOrderRequest, null);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginPlaceOrderResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * placeOrder (asynchronously)
     * Margin Isolated PlaceOrder
     * @param marginOrderRequest marginOrderRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedPlaceOrderAsync(MarginOrderRequest marginOrderRequest, final ApiCallback<ApiResponseResultOfMarginPlaceOrderResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = marginIsolatedPlaceOrderValidateBeforeCall(marginOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginPlaceOrderResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
