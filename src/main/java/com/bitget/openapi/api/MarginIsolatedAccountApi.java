/*
 * Bitget Open API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bitget.openapi.api;

import com.bitget.openapi.ApiCallback;
import com.bitget.openapi.ApiClient;
import com.bitget.openapi.ApiException;
import com.bitget.openapi.ApiResponse;
import com.bitget.openapi.Configuration;
import com.bitget.openapi.Pair;
import com.bitget.openapi.ProgressRequestBody;
import com.bitget.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.bitget.openapi.model.ApiResponseResultOfListOfMarginIsolatedAssetsPopulationResult;
import com.bitget.openapi.model.ApiResponseResultOfListOfMarginIsolatedAssetsRiskResult;
import com.bitget.openapi.model.ApiResponseResultOfMarginIsolatedAssetsResult;
import com.bitget.openapi.model.ApiResponseResultOfMarginIsolatedBorrowLimitResult;
import com.bitget.openapi.model.ApiResponseResultOfMarginIsolatedMaxBorrowResult;
import com.bitget.openapi.model.ApiResponseResultOfMarginIsolatedRepayResult;
import com.bitget.openapi.model.ApiResponseResultOfVoid;
import com.bitget.openapi.model.MarginIsolatedAssetsRiskRequest;
import com.bitget.openapi.model.MarginIsolatedLimitRequest;
import com.bitget.openapi.model.MarginIsolatedMaxBorrowRequest;
import com.bitget.openapi.model.MarginIsolatedRepayRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MarginIsolatedAccountApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MarginIsolatedAccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MarginIsolatedAccountApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for marginIsolatedAccountAssets
     * @param symbol symbol (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedAccountAssetsCall(String symbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/margin/v1/isolated/account/assets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (symbol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("symbol", symbol));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ACCESS_KEY", "ACCESS_PASSPHRASE", "ACCESS_SIGN", "ACCESS_TIMESTAMP", "SECRET_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marginIsolatedAccountAssetsValidateBeforeCall(String symbol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling marginIsolatedAccountAssets(Async)");
        }

        return marginIsolatedAccountAssetsCall(symbol, _callback);

    }

    /**
     * assets
     * Get Assets
     * @param symbol symbol (required)
     * @return ApiResponseResultOfListOfMarginIsolatedAssetsPopulationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseResultOfListOfMarginIsolatedAssetsPopulationResult marginIsolatedAccountAssets(String symbol) throws ApiException {
        ApiResponse<ApiResponseResultOfListOfMarginIsolatedAssetsPopulationResult> localVarResp = marginIsolatedAccountAssetsWithHttpInfo(symbol);
        return localVarResp.getData();
    }

    /**
     * assets
     * Get Assets
     * @param symbol symbol (required)
     * @return ApiResponse&lt;ApiResponseResultOfListOfMarginIsolatedAssetsPopulationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseResultOfListOfMarginIsolatedAssetsPopulationResult> marginIsolatedAccountAssetsWithHttpInfo(String symbol) throws ApiException {
        okhttp3.Call localVarCall = marginIsolatedAccountAssetsValidateBeforeCall(symbol, null);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfListOfMarginIsolatedAssetsPopulationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * assets (asynchronously)
     * Get Assets
     * @param symbol symbol (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedAccountAssetsAsync(String symbol, final ApiCallback<ApiResponseResultOfListOfMarginIsolatedAssetsPopulationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = marginIsolatedAccountAssetsValidateBeforeCall(symbol, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfListOfMarginIsolatedAssetsPopulationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marginIsolatedAccountBorrow
     * @param marginIsolatedLimitRequest marginIsolatedLimitRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedAccountBorrowCall(MarginIsolatedLimitRequest marginIsolatedLimitRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = marginIsolatedLimitRequest;

        // create path and map variables
        String localVarPath = "/api/margin/v1/isolated/account/borrow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ACCESS_KEY", "ACCESS_PASSPHRASE", "ACCESS_SIGN", "ACCESS_TIMESTAMP", "SECRET_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marginIsolatedAccountBorrowValidateBeforeCall(MarginIsolatedLimitRequest marginIsolatedLimitRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marginIsolatedLimitRequest' is set
        if (marginIsolatedLimitRequest == null) {
            throw new ApiException("Missing the required parameter 'marginIsolatedLimitRequest' when calling marginIsolatedAccountBorrow(Async)");
        }

        return marginIsolatedAccountBorrowCall(marginIsolatedLimitRequest, _callback);

    }

    /**
     * borrow
     * borrow
     * @param marginIsolatedLimitRequest marginIsolatedLimitRequest (required)
     * @return ApiResponseResultOfMarginIsolatedBorrowLimitResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseResultOfMarginIsolatedBorrowLimitResult marginIsolatedAccountBorrow(MarginIsolatedLimitRequest marginIsolatedLimitRequest) throws ApiException {
        ApiResponse<ApiResponseResultOfMarginIsolatedBorrowLimitResult> localVarResp = marginIsolatedAccountBorrowWithHttpInfo(marginIsolatedLimitRequest);
        return localVarResp.getData();
    }

    /**
     * borrow
     * borrow
     * @param marginIsolatedLimitRequest marginIsolatedLimitRequest (required)
     * @return ApiResponse&lt;ApiResponseResultOfMarginIsolatedBorrowLimitResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseResultOfMarginIsolatedBorrowLimitResult> marginIsolatedAccountBorrowWithHttpInfo(MarginIsolatedLimitRequest marginIsolatedLimitRequest) throws ApiException {
        okhttp3.Call localVarCall = marginIsolatedAccountBorrowValidateBeforeCall(marginIsolatedLimitRequest, null);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginIsolatedBorrowLimitResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * borrow (asynchronously)
     * borrow
     * @param marginIsolatedLimitRequest marginIsolatedLimitRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedAccountBorrowAsync(MarginIsolatedLimitRequest marginIsolatedLimitRequest, final ApiCallback<ApiResponseResultOfMarginIsolatedBorrowLimitResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = marginIsolatedAccountBorrowValidateBeforeCall(marginIsolatedLimitRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginIsolatedBorrowLimitResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marginIsolatedAccountMaxBorrowableAmount
     * @param marginIsolatedMaxBorrowRequest marginIsolatedMaxBorrowRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedAccountMaxBorrowableAmountCall(MarginIsolatedMaxBorrowRequest marginIsolatedMaxBorrowRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = marginIsolatedMaxBorrowRequest;

        // create path and map variables
        String localVarPath = "/api/margin/v1/isolated/account/maxBorrowableAmount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ACCESS_KEY", "ACCESS_PASSPHRASE", "ACCESS_SIGN", "ACCESS_TIMESTAMP", "SECRET_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marginIsolatedAccountMaxBorrowableAmountValidateBeforeCall(MarginIsolatedMaxBorrowRequest marginIsolatedMaxBorrowRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marginIsolatedMaxBorrowRequest' is set
        if (marginIsolatedMaxBorrowRequest == null) {
            throw new ApiException("Missing the required parameter 'marginIsolatedMaxBorrowRequest' when calling marginIsolatedAccountMaxBorrowableAmount(Async)");
        }

        return marginIsolatedAccountMaxBorrowableAmountCall(marginIsolatedMaxBorrowRequest, _callback);

    }

    /**
     * maxBorrowableAmount
     * Get MaxBorrowableAmount
     * @param marginIsolatedMaxBorrowRequest marginIsolatedMaxBorrowRequest (required)
     * @return ApiResponseResultOfMarginIsolatedMaxBorrowResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseResultOfMarginIsolatedMaxBorrowResult marginIsolatedAccountMaxBorrowableAmount(MarginIsolatedMaxBorrowRequest marginIsolatedMaxBorrowRequest) throws ApiException {
        ApiResponse<ApiResponseResultOfMarginIsolatedMaxBorrowResult> localVarResp = marginIsolatedAccountMaxBorrowableAmountWithHttpInfo(marginIsolatedMaxBorrowRequest);
        return localVarResp.getData();
    }

    /**
     * maxBorrowableAmount
     * Get MaxBorrowableAmount
     * @param marginIsolatedMaxBorrowRequest marginIsolatedMaxBorrowRequest (required)
     * @return ApiResponse&lt;ApiResponseResultOfMarginIsolatedMaxBorrowResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseResultOfMarginIsolatedMaxBorrowResult> marginIsolatedAccountMaxBorrowableAmountWithHttpInfo(MarginIsolatedMaxBorrowRequest marginIsolatedMaxBorrowRequest) throws ApiException {
        okhttp3.Call localVarCall = marginIsolatedAccountMaxBorrowableAmountValidateBeforeCall(marginIsolatedMaxBorrowRequest, null);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginIsolatedMaxBorrowResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * maxBorrowableAmount (asynchronously)
     * Get MaxBorrowableAmount
     * @param marginIsolatedMaxBorrowRequest marginIsolatedMaxBorrowRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedAccountMaxBorrowableAmountAsync(MarginIsolatedMaxBorrowRequest marginIsolatedMaxBorrowRequest, final ApiCallback<ApiResponseResultOfMarginIsolatedMaxBorrowResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = marginIsolatedAccountMaxBorrowableAmountValidateBeforeCall(marginIsolatedMaxBorrowRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginIsolatedMaxBorrowResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marginIsolatedAccountMaxTransferOutAmount
     * @param coin coin (required)
     * @param symbol symbol (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedAccountMaxTransferOutAmountCall(String coin, String symbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/margin/v1/isolated/account/maxTransferOutAmount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (coin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coin", coin));
        }

        if (symbol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("symbol", symbol));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ACCESS_KEY", "ACCESS_PASSPHRASE", "ACCESS_SIGN", "ACCESS_TIMESTAMP", "SECRET_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marginIsolatedAccountMaxTransferOutAmountValidateBeforeCall(String coin, String symbol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'coin' is set
        if (coin == null) {
            throw new ApiException("Missing the required parameter 'coin' when calling marginIsolatedAccountMaxTransferOutAmount(Async)");
        }

        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling marginIsolatedAccountMaxTransferOutAmount(Async)");
        }

        return marginIsolatedAccountMaxTransferOutAmountCall(coin, symbol, _callback);

    }

    /**
     * maxTransferOutAmount
     * Get Max TransferOutAmount
     * @param coin coin (required)
     * @param symbol symbol (required)
     * @return ApiResponseResultOfMarginIsolatedAssetsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseResultOfMarginIsolatedAssetsResult marginIsolatedAccountMaxTransferOutAmount(String coin, String symbol) throws ApiException {
        ApiResponse<ApiResponseResultOfMarginIsolatedAssetsResult> localVarResp = marginIsolatedAccountMaxTransferOutAmountWithHttpInfo(coin, symbol);
        return localVarResp.getData();
    }

    /**
     * maxTransferOutAmount
     * Get Max TransferOutAmount
     * @param coin coin (required)
     * @param symbol symbol (required)
     * @return ApiResponse&lt;ApiResponseResultOfMarginIsolatedAssetsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseResultOfMarginIsolatedAssetsResult> marginIsolatedAccountMaxTransferOutAmountWithHttpInfo(String coin, String symbol) throws ApiException {
        okhttp3.Call localVarCall = marginIsolatedAccountMaxTransferOutAmountValidateBeforeCall(coin, symbol, null);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginIsolatedAssetsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * maxTransferOutAmount (asynchronously)
     * Get Max TransferOutAmount
     * @param coin coin (required)
     * @param symbol symbol (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedAccountMaxTransferOutAmountAsync(String coin, String symbol, final ApiCallback<ApiResponseResultOfMarginIsolatedAssetsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = marginIsolatedAccountMaxTransferOutAmountValidateBeforeCall(coin, symbol, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginIsolatedAssetsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marginIsolatedAccountRepay
     * @param marginIsolatedRepayRequest marginIsolatedRepayRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedAccountRepayCall(MarginIsolatedRepayRequest marginIsolatedRepayRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = marginIsolatedRepayRequest;

        // create path and map variables
        String localVarPath = "/api/margin/v1/isolated/account/repay";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ACCESS_KEY", "ACCESS_PASSPHRASE", "ACCESS_SIGN", "ACCESS_TIMESTAMP", "SECRET_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marginIsolatedAccountRepayValidateBeforeCall(MarginIsolatedRepayRequest marginIsolatedRepayRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marginIsolatedRepayRequest' is set
        if (marginIsolatedRepayRequest == null) {
            throw new ApiException("Missing the required parameter 'marginIsolatedRepayRequest' when calling marginIsolatedAccountRepay(Async)");
        }

        return marginIsolatedAccountRepayCall(marginIsolatedRepayRequest, _callback);

    }

    /**
     * repay
     * repay
     * @param marginIsolatedRepayRequest marginIsolatedRepayRequest (required)
     * @return ApiResponseResultOfMarginIsolatedRepayResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseResultOfMarginIsolatedRepayResult marginIsolatedAccountRepay(MarginIsolatedRepayRequest marginIsolatedRepayRequest) throws ApiException {
        ApiResponse<ApiResponseResultOfMarginIsolatedRepayResult> localVarResp = marginIsolatedAccountRepayWithHttpInfo(marginIsolatedRepayRequest);
        return localVarResp.getData();
    }

    /**
     * repay
     * repay
     * @param marginIsolatedRepayRequest marginIsolatedRepayRequest (required)
     * @return ApiResponse&lt;ApiResponseResultOfMarginIsolatedRepayResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseResultOfMarginIsolatedRepayResult> marginIsolatedAccountRepayWithHttpInfo(MarginIsolatedRepayRequest marginIsolatedRepayRequest) throws ApiException {
        okhttp3.Call localVarCall = marginIsolatedAccountRepayValidateBeforeCall(marginIsolatedRepayRequest, null);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginIsolatedRepayResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * repay (asynchronously)
     * repay
     * @param marginIsolatedRepayRequest marginIsolatedRepayRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedAccountRepayAsync(MarginIsolatedRepayRequest marginIsolatedRepayRequest, final ApiCallback<ApiResponseResultOfMarginIsolatedRepayResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = marginIsolatedAccountRepayValidateBeforeCall(marginIsolatedRepayRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginIsolatedRepayResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marginIsolatedAccountRiskRate
     * @param marginIsolatedAssetsRiskRequest marginIsolatedAssetsRiskRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedAccountRiskRateCall(MarginIsolatedAssetsRiskRequest marginIsolatedAssetsRiskRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = marginIsolatedAssetsRiskRequest;

        // create path and map variables
        String localVarPath = "/api/margin/v1/isolated/account/riskRate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ACCESS_KEY", "ACCESS_PASSPHRASE", "ACCESS_SIGN", "ACCESS_TIMESTAMP", "SECRET_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marginIsolatedAccountRiskRateValidateBeforeCall(MarginIsolatedAssetsRiskRequest marginIsolatedAssetsRiskRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marginIsolatedAssetsRiskRequest' is set
        if (marginIsolatedAssetsRiskRequest == null) {
            throw new ApiException("Missing the required parameter 'marginIsolatedAssetsRiskRequest' when calling marginIsolatedAccountRiskRate(Async)");
        }

        return marginIsolatedAccountRiskRateCall(marginIsolatedAssetsRiskRequest, _callback);

    }

    /**
     * riskRate
     * riskRate
     * @param marginIsolatedAssetsRiskRequest marginIsolatedAssetsRiskRequest (required)
     * @return ApiResponseResultOfListOfMarginIsolatedAssetsRiskResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseResultOfListOfMarginIsolatedAssetsRiskResult marginIsolatedAccountRiskRate(MarginIsolatedAssetsRiskRequest marginIsolatedAssetsRiskRequest) throws ApiException {
        ApiResponse<ApiResponseResultOfListOfMarginIsolatedAssetsRiskResult> localVarResp = marginIsolatedAccountRiskRateWithHttpInfo(marginIsolatedAssetsRiskRequest);
        return localVarResp.getData();
    }

    /**
     * riskRate
     * riskRate
     * @param marginIsolatedAssetsRiskRequest marginIsolatedAssetsRiskRequest (required)
     * @return ApiResponse&lt;ApiResponseResultOfListOfMarginIsolatedAssetsRiskResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseResultOfListOfMarginIsolatedAssetsRiskResult> marginIsolatedAccountRiskRateWithHttpInfo(MarginIsolatedAssetsRiskRequest marginIsolatedAssetsRiskRequest) throws ApiException {
        okhttp3.Call localVarCall = marginIsolatedAccountRiskRateValidateBeforeCall(marginIsolatedAssetsRiskRequest, null);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfListOfMarginIsolatedAssetsRiskResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * riskRate (asynchronously)
     * riskRate
     * @param marginIsolatedAssetsRiskRequest marginIsolatedAssetsRiskRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginIsolatedAccountRiskRateAsync(MarginIsolatedAssetsRiskRequest marginIsolatedAssetsRiskRequest, final ApiCallback<ApiResponseResultOfListOfMarginIsolatedAssetsRiskResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = marginIsolatedAccountRiskRateValidateBeforeCall(marginIsolatedAssetsRiskRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfListOfMarginIsolatedAssetsRiskResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
