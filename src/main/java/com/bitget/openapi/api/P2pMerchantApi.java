/*
 * Bitget Open API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bitget.openapi.api;

import com.bitget.openapi.ApiCallback;
import com.bitget.openapi.ApiClient;
import com.bitget.openapi.ApiException;
import com.bitget.openapi.ApiResponse;
import com.bitget.openapi.Configuration;
import com.bitget.openapi.Pair;
import com.bitget.openapi.ProgressRequestBody;
import com.bitget.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.bitget.openapi.model.ApiResponseResultOfMerchantAdvResult;
import com.bitget.openapi.model.ApiResponseResultOfMerchantInfoResult;
import com.bitget.openapi.model.ApiResponseResultOfMerchantOrderResult;
import com.bitget.openapi.model.ApiResponseResultOfMerchantPersonInfo;
import com.bitget.openapi.model.ApiResponseResultOfVoid;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class P2pMerchantApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public P2pMerchantApi() {
        this(Configuration.getDefaultApiClient());
    }

    public P2pMerchantApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for merchantAdvList
     * @param startTime startTime (required)
     * @param endTime endTime (optional)
     * @param status status (optional)
     * @param type type (optional)
     * @param advNo advNo (optional)
     * @param coin coin (optional)
     * @param languageType languageType (optional)
     * @param fiat fiat (optional)
     * @param lastMinId languageType (optional)
     * @param pageSize pageSize (optional)
     * @param orderBy orderBy (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantAdvListCall(String startTime, String endTime, String status, String type, String advNo, String coin, String languageType, String fiat, String lastMinId, String pageSize, String orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/p2p/v1/merchant/advList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (advNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("advNo", advNo));
        }

        if (coin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coin", coin));
        }

        if (languageType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("languageType", languageType));
        }

        if (fiat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fiat", fiat));
        }

        if (lastMinId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastMinId", lastMinId));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ACCESS_KEY", "ACCESS_PASSPHRASE", "ACCESS_SIGN", "ACCESS_TIMESTAMP", "SECRET_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call merchantAdvListValidateBeforeCall(String startTime, String endTime, String status, String type, String advNo, String coin, String languageType, String fiat, String lastMinId, String pageSize, String orderBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling merchantAdvList(Async)");
        }

        return merchantAdvListCall(startTime, endTime, status, type, advNo, coin, languageType, fiat, lastMinId, pageSize, orderBy, _callback);

    }

    /**
     * advList
     * P2P merchant adv info
     * @param startTime startTime (required)
     * @param endTime endTime (optional)
     * @param status status (optional)
     * @param type type (optional)
     * @param advNo advNo (optional)
     * @param coin coin (optional)
     * @param languageType languageType (optional)
     * @param fiat fiat (optional)
     * @param lastMinId languageType (optional)
     * @param pageSize pageSize (optional)
     * @param orderBy orderBy (optional)
     * @return ApiResponseResultOfMerchantAdvResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseResultOfMerchantAdvResult merchantAdvList(String startTime, String endTime, String status, String type, String advNo, String coin, String languageType, String fiat, String lastMinId, String pageSize, String orderBy) throws ApiException {
        ApiResponse<ApiResponseResultOfMerchantAdvResult> localVarResp = merchantAdvListWithHttpInfo(startTime, endTime, status, type, advNo, coin, languageType, fiat, lastMinId, pageSize, orderBy);
        return localVarResp.getData();
    }

    /**
     * advList
     * P2P merchant adv info
     * @param startTime startTime (required)
     * @param endTime endTime (optional)
     * @param status status (optional)
     * @param type type (optional)
     * @param advNo advNo (optional)
     * @param coin coin (optional)
     * @param languageType languageType (optional)
     * @param fiat fiat (optional)
     * @param lastMinId languageType (optional)
     * @param pageSize pageSize (optional)
     * @param orderBy orderBy (optional)
     * @return ApiResponse&lt;ApiResponseResultOfMerchantAdvResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseResultOfMerchantAdvResult> merchantAdvListWithHttpInfo(String startTime, String endTime, String status, String type, String advNo, String coin, String languageType, String fiat, String lastMinId, String pageSize, String orderBy) throws ApiException {
        okhttp3.Call localVarCall = merchantAdvListValidateBeforeCall(startTime, endTime, status, type, advNo, coin, languageType, fiat, lastMinId, pageSize, orderBy, null);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMerchantAdvResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * advList (asynchronously)
     * P2P merchant adv info
     * @param startTime startTime (required)
     * @param endTime endTime (optional)
     * @param status status (optional)
     * @param type type (optional)
     * @param advNo advNo (optional)
     * @param coin coin (optional)
     * @param languageType languageType (optional)
     * @param fiat fiat (optional)
     * @param lastMinId languageType (optional)
     * @param pageSize pageSize (optional)
     * @param orderBy orderBy (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantAdvListAsync(String startTime, String endTime, String status, String type, String advNo, String coin, String languageType, String fiat, String lastMinId, String pageSize, String orderBy, final ApiCallback<ApiResponseResultOfMerchantAdvResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = merchantAdvListValidateBeforeCall(startTime, endTime, status, type, advNo, coin, languageType, fiat, lastMinId, pageSize, orderBy, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMerchantAdvResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for merchantInfo
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantInfoCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/p2p/v1/merchant/merchantInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ACCESS_KEY", "ACCESS_PASSPHRASE", "ACCESS_SIGN", "ACCESS_TIMESTAMP", "SECRET_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call merchantInfoValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return merchantInfoCall(_callback);

    }

    /**
     * merchantInfo
     * P2P merchant info self
     * @return ApiResponseResultOfMerchantPersonInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseResultOfMerchantPersonInfo merchantInfo() throws ApiException {
        ApiResponse<ApiResponseResultOfMerchantPersonInfo> localVarResp = merchantInfoWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * merchantInfo
     * P2P merchant info self
     * @return ApiResponse&lt;ApiResponseResultOfMerchantPersonInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseResultOfMerchantPersonInfo> merchantInfoWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = merchantInfoValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMerchantPersonInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * merchantInfo (asynchronously)
     * P2P merchant info self
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantInfoAsync(final ApiCallback<ApiResponseResultOfMerchantPersonInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = merchantInfoValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMerchantPersonInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for merchantList
     * @param online online (optional)
     * @param merchantId merchantId (optional)
     * @param lastMinId lastMinId (optional)
     * @param pageSize pageSize (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantListCall(String online, String merchantId, String lastMinId, String pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/p2p/v1/merchant/merchantList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (online != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("online", online));
        }

        if (merchantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("merchantId", merchantId));
        }

        if (lastMinId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastMinId", lastMinId));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ACCESS_KEY", "ACCESS_PASSPHRASE", "ACCESS_SIGN", "ACCESS_TIMESTAMP", "SECRET_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call merchantListValidateBeforeCall(String online, String merchantId, String lastMinId, String pageSize, final ApiCallback _callback) throws ApiException {
        return merchantListCall(online, merchantId, lastMinId, pageSize, _callback);

    }

    /**
     * merchantList
     * P2P merchant list
     * @param online online (optional)
     * @param merchantId merchantId (optional)
     * @param lastMinId lastMinId (optional)
     * @param pageSize pageSize (optional)
     * @return ApiResponseResultOfMerchantInfoResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseResultOfMerchantInfoResult merchantList(String online, String merchantId, String lastMinId, String pageSize) throws ApiException {
        ApiResponse<ApiResponseResultOfMerchantInfoResult> localVarResp = merchantListWithHttpInfo(online, merchantId, lastMinId, pageSize);
        return localVarResp.getData();
    }

    /**
     * merchantList
     * P2P merchant list
     * @param online online (optional)
     * @param merchantId merchantId (optional)
     * @param lastMinId lastMinId (optional)
     * @param pageSize pageSize (optional)
     * @return ApiResponse&lt;ApiResponseResultOfMerchantInfoResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseResultOfMerchantInfoResult> merchantListWithHttpInfo(String online, String merchantId, String lastMinId, String pageSize) throws ApiException {
        okhttp3.Call localVarCall = merchantListValidateBeforeCall(online, merchantId, lastMinId, pageSize, null);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMerchantInfoResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * merchantList (asynchronously)
     * P2P merchant list
     * @param online online (optional)
     * @param merchantId merchantId (optional)
     * @param lastMinId lastMinId (optional)
     * @param pageSize pageSize (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantListAsync(String online, String merchantId, String lastMinId, String pageSize, final ApiCallback<ApiResponseResultOfMerchantInfoResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = merchantListValidateBeforeCall(online, merchantId, lastMinId, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMerchantInfoResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for merchantOrderList
     * @param startTime startTime (required)
     * @param endTime endTime (optional)
     * @param status status (optional)
     * @param type type (optional)
     * @param advNo advNo (optional)
     * @param orderNo orderNo (optional)
     * @param coin coin (optional)
     * @param languageType languageType (optional)
     * @param fiat fiat (optional)
     * @param lastMinId languageType (optional)
     * @param pageSize pageSize (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantOrderListCall(String startTime, String endTime, String status, String type, String advNo, String orderNo, String coin, String languageType, String fiat, String lastMinId, String pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/p2p/v1/merchant/orderList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (advNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("advNo", advNo));
        }

        if (orderNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderNo", orderNo));
        }

        if (coin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coin", coin));
        }

        if (languageType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("languageType", languageType));
        }

        if (fiat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fiat", fiat));
        }

        if (lastMinId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastMinId", lastMinId));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ACCESS_KEY", "ACCESS_PASSPHRASE", "ACCESS_SIGN", "ACCESS_TIMESTAMP", "SECRET_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call merchantOrderListValidateBeforeCall(String startTime, String endTime, String status, String type, String advNo, String orderNo, String coin, String languageType, String fiat, String lastMinId, String pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling merchantOrderList(Async)");
        }

        return merchantOrderListCall(startTime, endTime, status, type, advNo, orderNo, coin, languageType, fiat, lastMinId, pageSize, _callback);

    }

    /**
     * orderList
     * P2P merchant order info
     * @param startTime startTime (required)
     * @param endTime endTime (optional)
     * @param status status (optional)
     * @param type type (optional)
     * @param advNo advNo (optional)
     * @param orderNo orderNo (optional)
     * @param coin coin (optional)
     * @param languageType languageType (optional)
     * @param fiat fiat (optional)
     * @param lastMinId languageType (optional)
     * @param pageSize pageSize (optional)
     * @return ApiResponseResultOfMerchantOrderResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseResultOfMerchantOrderResult merchantOrderList(String startTime, String endTime, String status, String type, String advNo, String orderNo, String coin, String languageType, String fiat, String lastMinId, String pageSize) throws ApiException {
        ApiResponse<ApiResponseResultOfMerchantOrderResult> localVarResp = merchantOrderListWithHttpInfo(startTime, endTime, status, type, advNo, orderNo, coin, languageType, fiat, lastMinId, pageSize);
        return localVarResp.getData();
    }

    /**
     * orderList
     * P2P merchant order info
     * @param startTime startTime (required)
     * @param endTime endTime (optional)
     * @param status status (optional)
     * @param type type (optional)
     * @param advNo advNo (optional)
     * @param orderNo orderNo (optional)
     * @param coin coin (optional)
     * @param languageType languageType (optional)
     * @param fiat fiat (optional)
     * @param lastMinId languageType (optional)
     * @param pageSize pageSize (optional)
     * @return ApiResponse&lt;ApiResponseResultOfMerchantOrderResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseResultOfMerchantOrderResult> merchantOrderListWithHttpInfo(String startTime, String endTime, String status, String type, String advNo, String orderNo, String coin, String languageType, String fiat, String lastMinId, String pageSize) throws ApiException {
        okhttp3.Call localVarCall = merchantOrderListValidateBeforeCall(startTime, endTime, status, type, advNo, orderNo, coin, languageType, fiat, lastMinId, pageSize, null);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMerchantOrderResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * orderList (asynchronously)
     * P2P merchant order info
     * @param startTime startTime (required)
     * @param endTime endTime (optional)
     * @param status status (optional)
     * @param type type (optional)
     * @param advNo advNo (optional)
     * @param orderNo orderNo (optional)
     * @param coin coin (optional)
     * @param languageType languageType (optional)
     * @param fiat fiat (optional)
     * @param lastMinId languageType (optional)
     * @param pageSize pageSize (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantOrderListAsync(String startTime, String endTime, String status, String type, String advNo, String orderNo, String coin, String languageType, String fiat, String lastMinId, String pageSize, final ApiCallback<ApiResponseResultOfMerchantOrderResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = merchantOrderListValidateBeforeCall(startTime, endTime, status, type, advNo, orderNo, coin, languageType, fiat, lastMinId, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMerchantOrderResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
