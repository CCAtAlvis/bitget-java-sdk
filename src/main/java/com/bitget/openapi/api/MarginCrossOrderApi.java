/*
 * Bitget Open API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bitget.openapi.api;

import com.bitget.openapi.ApiCallback;
import com.bitget.openapi.ApiClient;
import com.bitget.openapi.ApiException;
import com.bitget.openapi.ApiResponse;
import com.bitget.openapi.Configuration;
import com.bitget.openapi.Pair;
import com.bitget.openapi.ProgressRequestBody;
import com.bitget.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.bitget.openapi.model.ApiResponseResultOfMarginBatchCancelOrderResult;
import com.bitget.openapi.model.ApiResponseResultOfMarginBatchPlaceOrderResult;
import com.bitget.openapi.model.ApiResponseResultOfMarginOpenOrderInfoResult;
import com.bitget.openapi.model.ApiResponseResultOfMarginPlaceOrderResult;
import com.bitget.openapi.model.ApiResponseResultOfMarginTradeDetailInfoResult;
import com.bitget.openapi.model.ApiResponseResultOfVoid;
import com.bitget.openapi.model.MarginBatchCancelOrderRequest;
import com.bitget.openapi.model.MarginBatchOrdersRequest;
import com.bitget.openapi.model.MarginCancelOrderRequest;
import com.bitget.openapi.model.MarginOrderRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MarginCrossOrderApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MarginCrossOrderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MarginCrossOrderApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for marginCrossBatchCancelOrder
     * @param marginBatchCancelOrderRequest marginBatchCancelOrderRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginCrossBatchCancelOrderCall(MarginBatchCancelOrderRequest marginBatchCancelOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = marginBatchCancelOrderRequest;

        // create path and map variables
        String localVarPath = "/api/margin/v1/cross/order/batchCancelOrder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ACCESS_KEY", "ACCESS_PASSPHRASE", "ACCESS_SIGN", "ACCESS_TIMESTAMP", "SECRET_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marginCrossBatchCancelOrderValidateBeforeCall(MarginBatchCancelOrderRequest marginBatchCancelOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marginBatchCancelOrderRequest' is set
        if (marginBatchCancelOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'marginBatchCancelOrderRequest' when calling marginCrossBatchCancelOrder(Async)");
        }

        return marginCrossBatchCancelOrderCall(marginBatchCancelOrderRequest, _callback);

    }

    /**
     * batchCancelOrder
     * Margin Cross BatchCancelOrder
     * @param marginBatchCancelOrderRequest marginBatchCancelOrderRequest (required)
     * @return ApiResponseResultOfMarginBatchCancelOrderResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseResultOfMarginBatchCancelOrderResult marginCrossBatchCancelOrder(MarginBatchCancelOrderRequest marginBatchCancelOrderRequest) throws ApiException {
        ApiResponse<ApiResponseResultOfMarginBatchCancelOrderResult> localVarResp = marginCrossBatchCancelOrderWithHttpInfo(marginBatchCancelOrderRequest);
        return localVarResp.getData();
    }

    /**
     * batchCancelOrder
     * Margin Cross BatchCancelOrder
     * @param marginBatchCancelOrderRequest marginBatchCancelOrderRequest (required)
     * @return ApiResponse&lt;ApiResponseResultOfMarginBatchCancelOrderResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseResultOfMarginBatchCancelOrderResult> marginCrossBatchCancelOrderWithHttpInfo(MarginBatchCancelOrderRequest marginBatchCancelOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = marginCrossBatchCancelOrderValidateBeforeCall(marginBatchCancelOrderRequest, null);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginBatchCancelOrderResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * batchCancelOrder (asynchronously)
     * Margin Cross BatchCancelOrder
     * @param marginBatchCancelOrderRequest marginBatchCancelOrderRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginCrossBatchCancelOrderAsync(MarginBatchCancelOrderRequest marginBatchCancelOrderRequest, final ApiCallback<ApiResponseResultOfMarginBatchCancelOrderResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = marginCrossBatchCancelOrderValidateBeforeCall(marginBatchCancelOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginBatchCancelOrderResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marginCrossBatchPlaceOrder
     * @param marginOrderRequest marginOrderRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginCrossBatchPlaceOrderCall(MarginBatchOrdersRequest marginOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = marginOrderRequest;

        // create path and map variables
        String localVarPath = "/api/margin/v1/cross/order/batchPlaceOrder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ACCESS_KEY", "ACCESS_PASSPHRASE", "ACCESS_SIGN", "ACCESS_TIMESTAMP", "SECRET_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marginCrossBatchPlaceOrderValidateBeforeCall(MarginBatchOrdersRequest marginOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marginOrderRequest' is set
        if (marginOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'marginOrderRequest' when calling marginCrossBatchPlaceOrder(Async)");
        }

        return marginCrossBatchPlaceOrderCall(marginOrderRequest, _callback);

    }

    /**
     * batchPlaceOrder
     * Margin Cross PlaceOrder
     * @param marginOrderRequest marginOrderRequest (required)
     * @return ApiResponseResultOfMarginBatchPlaceOrderResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseResultOfMarginBatchPlaceOrderResult marginCrossBatchPlaceOrder(MarginBatchOrdersRequest marginOrderRequest) throws ApiException {
        ApiResponse<ApiResponseResultOfMarginBatchPlaceOrderResult> localVarResp = marginCrossBatchPlaceOrderWithHttpInfo(marginOrderRequest);
        return localVarResp.getData();
    }

    /**
     * batchPlaceOrder
     * Margin Cross PlaceOrder
     * @param marginOrderRequest marginOrderRequest (required)
     * @return ApiResponse&lt;ApiResponseResultOfMarginBatchPlaceOrderResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseResultOfMarginBatchPlaceOrderResult> marginCrossBatchPlaceOrderWithHttpInfo(MarginBatchOrdersRequest marginOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = marginCrossBatchPlaceOrderValidateBeforeCall(marginOrderRequest, null);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginBatchPlaceOrderResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * batchPlaceOrder (asynchronously)
     * Margin Cross PlaceOrder
     * @param marginOrderRequest marginOrderRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginCrossBatchPlaceOrderAsync(MarginBatchOrdersRequest marginOrderRequest, final ApiCallback<ApiResponseResultOfMarginBatchPlaceOrderResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = marginCrossBatchPlaceOrderValidateBeforeCall(marginOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginBatchPlaceOrderResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marginCrossCancelOrder
     * @param marginCancelOrderRequest marginCancelOrderRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginCrossCancelOrderCall(MarginCancelOrderRequest marginCancelOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = marginCancelOrderRequest;

        // create path and map variables
        String localVarPath = "/api/margin/v1/cross/order/cancelOrder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ACCESS_KEY", "ACCESS_PASSPHRASE", "ACCESS_SIGN", "ACCESS_TIMESTAMP", "SECRET_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marginCrossCancelOrderValidateBeforeCall(MarginCancelOrderRequest marginCancelOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marginCancelOrderRequest' is set
        if (marginCancelOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'marginCancelOrderRequest' when calling marginCrossCancelOrder(Async)");
        }

        return marginCrossCancelOrderCall(marginCancelOrderRequest, _callback);

    }

    /**
     * cancelOrder
     * Margin Cross CancelOrder
     * @param marginCancelOrderRequest marginCancelOrderRequest (required)
     * @return ApiResponseResultOfMarginBatchCancelOrderResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseResultOfMarginBatchCancelOrderResult marginCrossCancelOrder(MarginCancelOrderRequest marginCancelOrderRequest) throws ApiException {
        ApiResponse<ApiResponseResultOfMarginBatchCancelOrderResult> localVarResp = marginCrossCancelOrderWithHttpInfo(marginCancelOrderRequest);
        return localVarResp.getData();
    }

    /**
     * cancelOrder
     * Margin Cross CancelOrder
     * @param marginCancelOrderRequest marginCancelOrderRequest (required)
     * @return ApiResponse&lt;ApiResponseResultOfMarginBatchCancelOrderResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseResultOfMarginBatchCancelOrderResult> marginCrossCancelOrderWithHttpInfo(MarginCancelOrderRequest marginCancelOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = marginCrossCancelOrderValidateBeforeCall(marginCancelOrderRequest, null);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginBatchCancelOrderResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * cancelOrder (asynchronously)
     * Margin Cross CancelOrder
     * @param marginCancelOrderRequest marginCancelOrderRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginCrossCancelOrderAsync(MarginCancelOrderRequest marginCancelOrderRequest, final ApiCallback<ApiResponseResultOfMarginBatchCancelOrderResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = marginCrossCancelOrderValidateBeforeCall(marginCancelOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginBatchCancelOrderResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marginCrossFills
     * @param symbol symbol (required)
     * @param startTime startTime (required)
     * @param source source (optional)
     * @param endTime endTime (optional)
     * @param orderId orderId (optional)
     * @param lastFillId lastFillId (optional)
     * @param pageSize pageSize (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginCrossFillsCall(String symbol, String startTime, String source, String endTime, String orderId, String lastFillId, String pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/margin/v1/cross/order/fills";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (symbol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("symbol", symbol));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderId", orderId));
        }

        if (lastFillId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastFillId", lastFillId));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ACCESS_KEY", "ACCESS_PASSPHRASE", "ACCESS_SIGN", "ACCESS_TIMESTAMP", "SECRET_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marginCrossFillsValidateBeforeCall(String symbol, String startTime, String source, String endTime, String orderId, String lastFillId, String pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling marginCrossFills(Async)");
        }

        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling marginCrossFills(Async)");
        }

        return marginCrossFillsCall(symbol, startTime, source, endTime, orderId, lastFillId, pageSize, _callback);

    }

    /**
     * fills
     * Margin Cross Fills
     * @param symbol symbol (required)
     * @param startTime startTime (required)
     * @param source source (optional)
     * @param endTime endTime (optional)
     * @param orderId orderId (optional)
     * @param lastFillId lastFillId (optional)
     * @param pageSize pageSize (optional)
     * @return ApiResponseResultOfMarginTradeDetailInfoResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseResultOfMarginTradeDetailInfoResult marginCrossFills(String symbol, String startTime, String source, String endTime, String orderId, String lastFillId, String pageSize) throws ApiException {
        ApiResponse<ApiResponseResultOfMarginTradeDetailInfoResult> localVarResp = marginCrossFillsWithHttpInfo(symbol, startTime, source, endTime, orderId, lastFillId, pageSize);
        return localVarResp.getData();
    }

    /**
     * fills
     * Margin Cross Fills
     * @param symbol symbol (required)
     * @param startTime startTime (required)
     * @param source source (optional)
     * @param endTime endTime (optional)
     * @param orderId orderId (optional)
     * @param lastFillId lastFillId (optional)
     * @param pageSize pageSize (optional)
     * @return ApiResponse&lt;ApiResponseResultOfMarginTradeDetailInfoResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseResultOfMarginTradeDetailInfoResult> marginCrossFillsWithHttpInfo(String symbol, String startTime, String source, String endTime, String orderId, String lastFillId, String pageSize) throws ApiException {
        okhttp3.Call localVarCall = marginCrossFillsValidateBeforeCall(symbol, startTime, source, endTime, orderId, lastFillId, pageSize, null);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginTradeDetailInfoResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * fills (asynchronously)
     * Margin Cross Fills
     * @param symbol symbol (required)
     * @param startTime startTime (required)
     * @param source source (optional)
     * @param endTime endTime (optional)
     * @param orderId orderId (optional)
     * @param lastFillId lastFillId (optional)
     * @param pageSize pageSize (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginCrossFillsAsync(String symbol, String startTime, String source, String endTime, String orderId, String lastFillId, String pageSize, final ApiCallback<ApiResponseResultOfMarginTradeDetailInfoResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = marginCrossFillsValidateBeforeCall(symbol, startTime, source, endTime, orderId, lastFillId, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginTradeDetailInfoResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marginCrossHistoryOrders
     * @param symbol symbol (required)
     * @param startTime startTime (required)
     * @param source source (optional)
     * @param endTime endTime (optional)
     * @param orderId orderId (optional)
     * @param clientOid clientOid (optional)
     * @param minId minId (optional)
     * @param pageSize pageSize (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginCrossHistoryOrdersCall(String symbol, String startTime, String source, String endTime, String orderId, String clientOid, String minId, String pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/margin/v1/cross/order/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (symbol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("symbol", symbol));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderId", orderId));
        }

        if (clientOid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientOid", clientOid));
        }

        if (minId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minId", minId));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ACCESS_KEY", "ACCESS_PASSPHRASE", "ACCESS_SIGN", "ACCESS_TIMESTAMP", "SECRET_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marginCrossHistoryOrdersValidateBeforeCall(String symbol, String startTime, String source, String endTime, String orderId, String clientOid, String minId, String pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling marginCrossHistoryOrders(Async)");
        }

        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling marginCrossHistoryOrders(Async)");
        }

        return marginCrossHistoryOrdersCall(symbol, startTime, source, endTime, orderId, clientOid, minId, pageSize, _callback);

    }

    /**
     * history
     * Margin Cross historyOrders
     * @param symbol symbol (required)
     * @param startTime startTime (required)
     * @param source source (optional)
     * @param endTime endTime (optional)
     * @param orderId orderId (optional)
     * @param clientOid clientOid (optional)
     * @param minId minId (optional)
     * @param pageSize pageSize (optional)
     * @return ApiResponseResultOfMarginOpenOrderInfoResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseResultOfMarginOpenOrderInfoResult marginCrossHistoryOrders(String symbol, String startTime, String source, String endTime, String orderId, String clientOid, String minId, String pageSize) throws ApiException {
        ApiResponse<ApiResponseResultOfMarginOpenOrderInfoResult> localVarResp = marginCrossHistoryOrdersWithHttpInfo(symbol, startTime, source, endTime, orderId, clientOid, minId, pageSize);
        return localVarResp.getData();
    }

    /**
     * history
     * Margin Cross historyOrders
     * @param symbol symbol (required)
     * @param startTime startTime (required)
     * @param source source (optional)
     * @param endTime endTime (optional)
     * @param orderId orderId (optional)
     * @param clientOid clientOid (optional)
     * @param minId minId (optional)
     * @param pageSize pageSize (optional)
     * @return ApiResponse&lt;ApiResponseResultOfMarginOpenOrderInfoResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseResultOfMarginOpenOrderInfoResult> marginCrossHistoryOrdersWithHttpInfo(String symbol, String startTime, String source, String endTime, String orderId, String clientOid, String minId, String pageSize) throws ApiException {
        okhttp3.Call localVarCall = marginCrossHistoryOrdersValidateBeforeCall(symbol, startTime, source, endTime, orderId, clientOid, minId, pageSize, null);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginOpenOrderInfoResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * history (asynchronously)
     * Margin Cross historyOrders
     * @param symbol symbol (required)
     * @param startTime startTime (required)
     * @param source source (optional)
     * @param endTime endTime (optional)
     * @param orderId orderId (optional)
     * @param clientOid clientOid (optional)
     * @param minId minId (optional)
     * @param pageSize pageSize (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginCrossHistoryOrdersAsync(String symbol, String startTime, String source, String endTime, String orderId, String clientOid, String minId, String pageSize, final ApiCallback<ApiResponseResultOfMarginOpenOrderInfoResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = marginCrossHistoryOrdersValidateBeforeCall(symbol, startTime, source, endTime, orderId, clientOid, minId, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginOpenOrderInfoResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marginCrossOpenOrders
     * @param symbol symbol (required)
     * @param startTime startTime (required)
     * @param endTime endTime (optional)
     * @param orderId orderId (optional)
     * @param clientOid clientOid (optional)
     * @param pageSize pageSize (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginCrossOpenOrdersCall(String symbol, String startTime, String endTime, String orderId, String clientOid, String pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/margin/v1/cross/order/openOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (symbol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("symbol", symbol));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderId", orderId));
        }

        if (clientOid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientOid", clientOid));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ACCESS_KEY", "ACCESS_PASSPHRASE", "ACCESS_SIGN", "ACCESS_TIMESTAMP", "SECRET_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marginCrossOpenOrdersValidateBeforeCall(String symbol, String startTime, String endTime, String orderId, String clientOid, String pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling marginCrossOpenOrders(Async)");
        }

        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling marginCrossOpenOrders(Async)");
        }

        return marginCrossOpenOrdersCall(symbol, startTime, endTime, orderId, clientOid, pageSize, _callback);

    }

    /**
     * openOrders
     * Margin Cross openOrders
     * @param symbol symbol (required)
     * @param startTime startTime (required)
     * @param endTime endTime (optional)
     * @param orderId orderId (optional)
     * @param clientOid clientOid (optional)
     * @param pageSize pageSize (optional)
     * @return ApiResponseResultOfMarginOpenOrderInfoResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseResultOfMarginOpenOrderInfoResult marginCrossOpenOrders(String symbol, String startTime, String endTime, String orderId, String clientOid, String pageSize) throws ApiException {
        ApiResponse<ApiResponseResultOfMarginOpenOrderInfoResult> localVarResp = marginCrossOpenOrdersWithHttpInfo(symbol, startTime, endTime, orderId, clientOid, pageSize);
        return localVarResp.getData();
    }

    /**
     * openOrders
     * Margin Cross openOrders
     * @param symbol symbol (required)
     * @param startTime startTime (required)
     * @param endTime endTime (optional)
     * @param orderId orderId (optional)
     * @param clientOid clientOid (optional)
     * @param pageSize pageSize (optional)
     * @return ApiResponse&lt;ApiResponseResultOfMarginOpenOrderInfoResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseResultOfMarginOpenOrderInfoResult> marginCrossOpenOrdersWithHttpInfo(String symbol, String startTime, String endTime, String orderId, String clientOid, String pageSize) throws ApiException {
        okhttp3.Call localVarCall = marginCrossOpenOrdersValidateBeforeCall(symbol, startTime, endTime, orderId, clientOid, pageSize, null);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginOpenOrderInfoResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * openOrders (asynchronously)
     * Margin Cross openOrders
     * @param symbol symbol (required)
     * @param startTime startTime (required)
     * @param endTime endTime (optional)
     * @param orderId orderId (optional)
     * @param clientOid clientOid (optional)
     * @param pageSize pageSize (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginCrossOpenOrdersAsync(String symbol, String startTime, String endTime, String orderId, String clientOid, String pageSize, final ApiCallback<ApiResponseResultOfMarginOpenOrderInfoResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = marginCrossOpenOrdersValidateBeforeCall(symbol, startTime, endTime, orderId, clientOid, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginOpenOrderInfoResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for marginCrossPlaceOrder
     * @param marginOrderRequest marginOrderRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginCrossPlaceOrderCall(MarginOrderRequest marginOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = marginOrderRequest;

        // create path and map variables
        String localVarPath = "/api/margin/v1/cross/order/placeOrder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ACCESS_KEY", "ACCESS_PASSPHRASE", "ACCESS_SIGN", "ACCESS_TIMESTAMP", "SECRET_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marginCrossPlaceOrderValidateBeforeCall(MarginOrderRequest marginOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marginOrderRequest' is set
        if (marginOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'marginOrderRequest' when calling marginCrossPlaceOrder(Async)");
        }

        return marginCrossPlaceOrderCall(marginOrderRequest, _callback);

    }

    /**
     * placeOrder
     * Margin Cross PlaceOrder
     * @param marginOrderRequest marginOrderRequest (required)
     * @return ApiResponseResultOfMarginPlaceOrderResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponseResultOfMarginPlaceOrderResult marginCrossPlaceOrder(MarginOrderRequest marginOrderRequest) throws ApiException {
        ApiResponse<ApiResponseResultOfMarginPlaceOrderResult> localVarResp = marginCrossPlaceOrderWithHttpInfo(marginOrderRequest);
        return localVarResp.getData();
    }

    /**
     * placeOrder
     * Margin Cross PlaceOrder
     * @param marginOrderRequest marginOrderRequest (required)
     * @return ApiResponse&lt;ApiResponseResultOfMarginPlaceOrderResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiResponseResultOfMarginPlaceOrderResult> marginCrossPlaceOrderWithHttpInfo(MarginOrderRequest marginOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = marginCrossPlaceOrderValidateBeforeCall(marginOrderRequest, null);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginPlaceOrderResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * placeOrder (asynchronously)
     * Margin Cross PlaceOrder
     * @param marginOrderRequest marginOrderRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Gateway Frequency Limit </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call marginCrossPlaceOrderAsync(MarginOrderRequest marginOrderRequest, final ApiCallback<ApiResponseResultOfMarginPlaceOrderResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = marginCrossPlaceOrderValidateBeforeCall(marginOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiResponseResultOfMarginPlaceOrderResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
