/*
 * Bitget Open API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bitget.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.bitget.openapi.JSON;

/**
 * MerchantPersonInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MerchantPersonInfo {
  public static final String SERIALIZED_NAME_AVERAGE_PAYMENT = "averagePayment";
  @SerializedName(SERIALIZED_NAME_AVERAGE_PAYMENT)
  private String averagePayment;

  public static final String SERIALIZED_NAME_AVERAGE_REALESE = "averageRealese";
  @SerializedName(SERIALIZED_NAME_AVERAGE_REALESE)
  private String averageRealese;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EMAIL_BIND_FLAG = "emailBindFlag";
  @SerializedName(SERIALIZED_NAME_EMAIL_BIND_FLAG)
  private Boolean emailBindFlag;

  public static final String SERIALIZED_NAME_KYC_FLAG = "kycFlag";
  @SerializedName(SERIALIZED_NAME_KYC_FLAG)
  private Boolean kycFlag;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchantId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_MOBILE = "mobile";
  @SerializedName(SERIALIZED_NAME_MOBILE)
  private String mobile;

  public static final String SERIALIZED_NAME_MOBILE_BIND_FLAG = "mobileBindFlag";
  @SerializedName(SERIALIZED_NAME_MOBILE_BIND_FLAG)
  private Boolean mobileBindFlag;

  public static final String SERIALIZED_NAME_NICK_NAME = "nickName";
  @SerializedName(SERIALIZED_NAME_NICK_NAME)
  private String nickName;

  public static final String SERIALIZED_NAME_REAL_NAME = "realName";
  @SerializedName(SERIALIZED_NAME_REAL_NAME)
  private String realName;

  public static final String SERIALIZED_NAME_REGISTER_TIME = "registerTime";
  @SerializedName(SERIALIZED_NAME_REGISTER_TIME)
  private String registerTime;

  public static final String SERIALIZED_NAME_THIRTY_BUY = "thirtyBuy";
  @SerializedName(SERIALIZED_NAME_THIRTY_BUY)
  private String thirtyBuy;

  public static final String SERIALIZED_NAME_THIRTY_COMPLETION_RATE = "thirtyCompletionRate";
  @SerializedName(SERIALIZED_NAME_THIRTY_COMPLETION_RATE)
  private String thirtyCompletionRate;

  public static final String SERIALIZED_NAME_THIRTY_SELL = "thirtySell";
  @SerializedName(SERIALIZED_NAME_THIRTY_SELL)
  private String thirtySell;

  public static final String SERIALIZED_NAME_THIRTY_TRADES = "thirtyTrades";
  @SerializedName(SERIALIZED_NAME_THIRTY_TRADES)
  private String thirtyTrades;

  public static final String SERIALIZED_NAME_TOTAL_BUY = "totalBuy";
  @SerializedName(SERIALIZED_NAME_TOTAL_BUY)
  private String totalBuy;

  public static final String SERIALIZED_NAME_TOTAL_COMPLETION_RATE = "totalCompletionRate";
  @SerializedName(SERIALIZED_NAME_TOTAL_COMPLETION_RATE)
  private String totalCompletionRate;

  public static final String SERIALIZED_NAME_TOTAL_SELL = "totalSell";
  @SerializedName(SERIALIZED_NAME_TOTAL_SELL)
  private String totalSell;

  public static final String SERIALIZED_NAME_TOTAL_TRADES = "totalTrades";
  @SerializedName(SERIALIZED_NAME_TOTAL_TRADES)
  private String totalTrades;

  public MerchantPersonInfo() {
  }

  public MerchantPersonInfo averagePayment(String averagePayment) {
    
    this.averagePayment = averagePayment;
    return this;
  }

   /**
   * Get averagePayment
   * @return averagePayment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAveragePayment() {
    return averagePayment;
  }


  public void setAveragePayment(String averagePayment) {
    this.averagePayment = averagePayment;
  }


  public MerchantPersonInfo averageRealese(String averageRealese) {
    
    this.averageRealese = averageRealese;
    return this;
  }

   /**
   * Get averageRealese
   * @return averageRealese
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAverageRealese() {
    return averageRealese;
  }


  public void setAverageRealese(String averageRealese) {
    this.averageRealese = averageRealese;
  }


  public MerchantPersonInfo email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public MerchantPersonInfo emailBindFlag(Boolean emailBindFlag) {
    
    this.emailBindFlag = emailBindFlag;
    return this;
  }

   /**
   * Get emailBindFlag
   * @return emailBindFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getEmailBindFlag() {
    return emailBindFlag;
  }


  public void setEmailBindFlag(Boolean emailBindFlag) {
    this.emailBindFlag = emailBindFlag;
  }


  public MerchantPersonInfo kycFlag(Boolean kycFlag) {
    
    this.kycFlag = kycFlag;
    return this;
  }

   /**
   * Get kycFlag
   * @return kycFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getKycFlag() {
    return kycFlag;
  }


  public void setKycFlag(Boolean kycFlag) {
    this.kycFlag = kycFlag;
  }


  public MerchantPersonInfo merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Get merchantId
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public MerchantPersonInfo mobile(String mobile) {
    
    this.mobile = mobile;
    return this;
  }

   /**
   * Get mobile
   * @return mobile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMobile() {
    return mobile;
  }


  public void setMobile(String mobile) {
    this.mobile = mobile;
  }


  public MerchantPersonInfo mobileBindFlag(Boolean mobileBindFlag) {
    
    this.mobileBindFlag = mobileBindFlag;
    return this;
  }

   /**
   * Get mobileBindFlag
   * @return mobileBindFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getMobileBindFlag() {
    return mobileBindFlag;
  }


  public void setMobileBindFlag(Boolean mobileBindFlag) {
    this.mobileBindFlag = mobileBindFlag;
  }


  public MerchantPersonInfo nickName(String nickName) {
    
    this.nickName = nickName;
    return this;
  }

   /**
   * Get nickName
   * @return nickName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNickName() {
    return nickName;
  }


  public void setNickName(String nickName) {
    this.nickName = nickName;
  }


  public MerchantPersonInfo realName(String realName) {
    
    this.realName = realName;
    return this;
  }

   /**
   * Get realName
   * @return realName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRealName() {
    return realName;
  }


  public void setRealName(String realName) {
    this.realName = realName;
  }


  public MerchantPersonInfo registerTime(String registerTime) {
    
    this.registerTime = registerTime;
    return this;
  }

   /**
   * Get registerTime
   * @return registerTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRegisterTime() {
    return registerTime;
  }


  public void setRegisterTime(String registerTime) {
    this.registerTime = registerTime;
  }


  public MerchantPersonInfo thirtyBuy(String thirtyBuy) {
    
    this.thirtyBuy = thirtyBuy;
    return this;
  }

   /**
   * Get thirtyBuy
   * @return thirtyBuy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getThirtyBuy() {
    return thirtyBuy;
  }


  public void setThirtyBuy(String thirtyBuy) {
    this.thirtyBuy = thirtyBuy;
  }


  public MerchantPersonInfo thirtyCompletionRate(String thirtyCompletionRate) {
    
    this.thirtyCompletionRate = thirtyCompletionRate;
    return this;
  }

   /**
   * Get thirtyCompletionRate
   * @return thirtyCompletionRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getThirtyCompletionRate() {
    return thirtyCompletionRate;
  }


  public void setThirtyCompletionRate(String thirtyCompletionRate) {
    this.thirtyCompletionRate = thirtyCompletionRate;
  }


  public MerchantPersonInfo thirtySell(String thirtySell) {
    
    this.thirtySell = thirtySell;
    return this;
  }

   /**
   * Get thirtySell
   * @return thirtySell
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getThirtySell() {
    return thirtySell;
  }


  public void setThirtySell(String thirtySell) {
    this.thirtySell = thirtySell;
  }


  public MerchantPersonInfo thirtyTrades(String thirtyTrades) {
    
    this.thirtyTrades = thirtyTrades;
    return this;
  }

   /**
   * Get thirtyTrades
   * @return thirtyTrades
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getThirtyTrades() {
    return thirtyTrades;
  }


  public void setThirtyTrades(String thirtyTrades) {
    this.thirtyTrades = thirtyTrades;
  }


  public MerchantPersonInfo totalBuy(String totalBuy) {
    
    this.totalBuy = totalBuy;
    return this;
  }

   /**
   * Get totalBuy
   * @return totalBuy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTotalBuy() {
    return totalBuy;
  }


  public void setTotalBuy(String totalBuy) {
    this.totalBuy = totalBuy;
  }


  public MerchantPersonInfo totalCompletionRate(String totalCompletionRate) {
    
    this.totalCompletionRate = totalCompletionRate;
    return this;
  }

   /**
   * Get totalCompletionRate
   * @return totalCompletionRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTotalCompletionRate() {
    return totalCompletionRate;
  }


  public void setTotalCompletionRate(String totalCompletionRate) {
    this.totalCompletionRate = totalCompletionRate;
  }


  public MerchantPersonInfo totalSell(String totalSell) {
    
    this.totalSell = totalSell;
    return this;
  }

   /**
   * Get totalSell
   * @return totalSell
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTotalSell() {
    return totalSell;
  }


  public void setTotalSell(String totalSell) {
    this.totalSell = totalSell;
  }


  public MerchantPersonInfo totalTrades(String totalTrades) {
    
    this.totalTrades = totalTrades;
    return this;
  }

   /**
   * Get totalTrades
   * @return totalTrades
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTotalTrades() {
    return totalTrades;
  }


  public void setTotalTrades(String totalTrades) {
    this.totalTrades = totalTrades;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MerchantPersonInfo instance itself
   */
  public MerchantPersonInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantPersonInfo merchantPersonInfo = (MerchantPersonInfo) o;
    return Objects.equals(this.averagePayment, merchantPersonInfo.averagePayment) &&
        Objects.equals(this.averageRealese, merchantPersonInfo.averageRealese) &&
        Objects.equals(this.email, merchantPersonInfo.email) &&
        Objects.equals(this.emailBindFlag, merchantPersonInfo.emailBindFlag) &&
        Objects.equals(this.kycFlag, merchantPersonInfo.kycFlag) &&
        Objects.equals(this.merchantId, merchantPersonInfo.merchantId) &&
        Objects.equals(this.mobile, merchantPersonInfo.mobile) &&
        Objects.equals(this.mobileBindFlag, merchantPersonInfo.mobileBindFlag) &&
        Objects.equals(this.nickName, merchantPersonInfo.nickName) &&
        Objects.equals(this.realName, merchantPersonInfo.realName) &&
        Objects.equals(this.registerTime, merchantPersonInfo.registerTime) &&
        Objects.equals(this.thirtyBuy, merchantPersonInfo.thirtyBuy) &&
        Objects.equals(this.thirtyCompletionRate, merchantPersonInfo.thirtyCompletionRate) &&
        Objects.equals(this.thirtySell, merchantPersonInfo.thirtySell) &&
        Objects.equals(this.thirtyTrades, merchantPersonInfo.thirtyTrades) &&
        Objects.equals(this.totalBuy, merchantPersonInfo.totalBuy) &&
        Objects.equals(this.totalCompletionRate, merchantPersonInfo.totalCompletionRate) &&
        Objects.equals(this.totalSell, merchantPersonInfo.totalSell) &&
        Objects.equals(this.totalTrades, merchantPersonInfo.totalTrades)&&
        Objects.equals(this.additionalProperties, merchantPersonInfo.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averagePayment, averageRealese, email, emailBindFlag, kycFlag, merchantId, mobile, mobileBindFlag, nickName, realName, registerTime, thirtyBuy, thirtyCompletionRate, thirtySell, thirtyTrades, totalBuy, totalCompletionRate, totalSell, totalTrades, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantPersonInfo {\n");
    sb.append("    averagePayment: ").append(toIndentedString(averagePayment)).append("\n");
    sb.append("    averageRealese: ").append(toIndentedString(averageRealese)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    emailBindFlag: ").append(toIndentedString(emailBindFlag)).append("\n");
    sb.append("    kycFlag: ").append(toIndentedString(kycFlag)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    mobile: ").append(toIndentedString(mobile)).append("\n");
    sb.append("    mobileBindFlag: ").append(toIndentedString(mobileBindFlag)).append("\n");
    sb.append("    nickName: ").append(toIndentedString(nickName)).append("\n");
    sb.append("    realName: ").append(toIndentedString(realName)).append("\n");
    sb.append("    registerTime: ").append(toIndentedString(registerTime)).append("\n");
    sb.append("    thirtyBuy: ").append(toIndentedString(thirtyBuy)).append("\n");
    sb.append("    thirtyCompletionRate: ").append(toIndentedString(thirtyCompletionRate)).append("\n");
    sb.append("    thirtySell: ").append(toIndentedString(thirtySell)).append("\n");
    sb.append("    thirtyTrades: ").append(toIndentedString(thirtyTrades)).append("\n");
    sb.append("    totalBuy: ").append(toIndentedString(totalBuy)).append("\n");
    sb.append("    totalCompletionRate: ").append(toIndentedString(totalCompletionRate)).append("\n");
    sb.append("    totalSell: ").append(toIndentedString(totalSell)).append("\n");
    sb.append("    totalTrades: ").append(toIndentedString(totalTrades)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("averagePayment");
    openapiFields.add("averageRealese");
    openapiFields.add("email");
    openapiFields.add("emailBindFlag");
    openapiFields.add("kycFlag");
    openapiFields.add("merchantId");
    openapiFields.add("mobile");
    openapiFields.add("mobileBindFlag");
    openapiFields.add("nickName");
    openapiFields.add("realName");
    openapiFields.add("registerTime");
    openapiFields.add("thirtyBuy");
    openapiFields.add("thirtyCompletionRate");
    openapiFields.add("thirtySell");
    openapiFields.add("thirtyTrades");
    openapiFields.add("totalBuy");
    openapiFields.add("totalCompletionRate");
    openapiFields.add("totalSell");
    openapiFields.add("totalTrades");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MerchantPersonInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MerchantPersonInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MerchantPersonInfo is not found in the empty JSON string", MerchantPersonInfo.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("averagePayment") != null && !jsonObj.get("averagePayment").isJsonNull()) && !jsonObj.get("averagePayment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `averagePayment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("averagePayment").toString()));
      }
      if ((jsonObj.get("averageRealese") != null && !jsonObj.get("averageRealese").isJsonNull()) && !jsonObj.get("averageRealese").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `averageRealese` to be a primitive type in the JSON string but got `%s`", jsonObj.get("averageRealese").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("merchantId") != null && !jsonObj.get("merchantId").isJsonNull()) && !jsonObj.get("merchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantId").toString()));
      }
      if ((jsonObj.get("mobile") != null && !jsonObj.get("mobile").isJsonNull()) && !jsonObj.get("mobile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobile").toString()));
      }
      if ((jsonObj.get("nickName") != null && !jsonObj.get("nickName").isJsonNull()) && !jsonObj.get("nickName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickName").toString()));
      }
      if ((jsonObj.get("realName") != null && !jsonObj.get("realName").isJsonNull()) && !jsonObj.get("realName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `realName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("realName").toString()));
      }
      if ((jsonObj.get("registerTime") != null && !jsonObj.get("registerTime").isJsonNull()) && !jsonObj.get("registerTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registerTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registerTime").toString()));
      }
      if ((jsonObj.get("thirtyBuy") != null && !jsonObj.get("thirtyBuy").isJsonNull()) && !jsonObj.get("thirtyBuy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thirtyBuy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thirtyBuy").toString()));
      }
      if ((jsonObj.get("thirtyCompletionRate") != null && !jsonObj.get("thirtyCompletionRate").isJsonNull()) && !jsonObj.get("thirtyCompletionRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thirtyCompletionRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thirtyCompletionRate").toString()));
      }
      if ((jsonObj.get("thirtySell") != null && !jsonObj.get("thirtySell").isJsonNull()) && !jsonObj.get("thirtySell").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thirtySell` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thirtySell").toString()));
      }
      if ((jsonObj.get("thirtyTrades") != null && !jsonObj.get("thirtyTrades").isJsonNull()) && !jsonObj.get("thirtyTrades").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thirtyTrades` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thirtyTrades").toString()));
      }
      if ((jsonObj.get("totalBuy") != null && !jsonObj.get("totalBuy").isJsonNull()) && !jsonObj.get("totalBuy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalBuy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalBuy").toString()));
      }
      if ((jsonObj.get("totalCompletionRate") != null && !jsonObj.get("totalCompletionRate").isJsonNull()) && !jsonObj.get("totalCompletionRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalCompletionRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalCompletionRate").toString()));
      }
      if ((jsonObj.get("totalSell") != null && !jsonObj.get("totalSell").isJsonNull()) && !jsonObj.get("totalSell").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalSell` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalSell").toString()));
      }
      if ((jsonObj.get("totalTrades") != null && !jsonObj.get("totalTrades").isJsonNull()) && !jsonObj.get("totalTrades").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalTrades` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalTrades").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MerchantPersonInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MerchantPersonInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MerchantPersonInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MerchantPersonInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<MerchantPersonInfo>() {
           @Override
           public void write(JsonWriter out, MerchantPersonInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MerchantPersonInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MerchantPersonInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MerchantPersonInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MerchantPersonInfo
  * @throws IOException if the JSON string is invalid with respect to MerchantPersonInfo
  */
  public static MerchantPersonInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MerchantPersonInfo.class);
  }

 /**
  * Convert an instance of MerchantPersonInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

