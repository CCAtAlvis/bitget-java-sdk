/*
 * Bitget Open API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bitget.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.bitget.openapi.JSON;

/**
 * MarginLiquidationInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MarginLiquidationInfo {
  public static final String SERIALIZED_NAME_CTIME = "ctime";
  @SerializedName(SERIALIZED_NAME_CTIME)
  private String ctime;

  public static final String SERIALIZED_NAME_LIQ_END_TIME = "liqEndTime";
  @SerializedName(SERIALIZED_NAME_LIQ_END_TIME)
  private String liqEndTime;

  public static final String SERIALIZED_NAME_LIQ_FEE = "liqFee";
  @SerializedName(SERIALIZED_NAME_LIQ_FEE)
  private String liqFee;

  public static final String SERIALIZED_NAME_LIQ_ID = "liqId";
  @SerializedName(SERIALIZED_NAME_LIQ_ID)
  private String liqId;

  public static final String SERIALIZED_NAME_LIQ_RISK = "liqRisk";
  @SerializedName(SERIALIZED_NAME_LIQ_RISK)
  private String liqRisk;

  public static final String SERIALIZED_NAME_LIQ_START_TIME = "liqStartTime";
  @SerializedName(SERIALIZED_NAME_LIQ_START_TIME)
  private String liqStartTime;

  public static final String SERIALIZED_NAME_TOTAL_ASSETS = "totalAssets";
  @SerializedName(SERIALIZED_NAME_TOTAL_ASSETS)
  private String totalAssets;

  public static final String SERIALIZED_NAME_TOTAL_DEBT = "totalDebt";
  @SerializedName(SERIALIZED_NAME_TOTAL_DEBT)
  private String totalDebt;

  public MarginLiquidationInfo() {
  }

  public MarginLiquidationInfo ctime(String ctime) {
    
    this.ctime = ctime;
    return this;
  }

   /**
   * Get ctime
   * @return ctime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCtime() {
    return ctime;
  }


  public void setCtime(String ctime) {
    this.ctime = ctime;
  }


  public MarginLiquidationInfo liqEndTime(String liqEndTime) {
    
    this.liqEndTime = liqEndTime;
    return this;
  }

   /**
   * Get liqEndTime
   * @return liqEndTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLiqEndTime() {
    return liqEndTime;
  }


  public void setLiqEndTime(String liqEndTime) {
    this.liqEndTime = liqEndTime;
  }


  public MarginLiquidationInfo liqFee(String liqFee) {
    
    this.liqFee = liqFee;
    return this;
  }

   /**
   * Get liqFee
   * @return liqFee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLiqFee() {
    return liqFee;
  }


  public void setLiqFee(String liqFee) {
    this.liqFee = liqFee;
  }


  public MarginLiquidationInfo liqId(String liqId) {
    
    this.liqId = liqId;
    return this;
  }

   /**
   * Get liqId
   * @return liqId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLiqId() {
    return liqId;
  }


  public void setLiqId(String liqId) {
    this.liqId = liqId;
  }


  public MarginLiquidationInfo liqRisk(String liqRisk) {
    
    this.liqRisk = liqRisk;
    return this;
  }

   /**
   * Get liqRisk
   * @return liqRisk
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLiqRisk() {
    return liqRisk;
  }


  public void setLiqRisk(String liqRisk) {
    this.liqRisk = liqRisk;
  }


  public MarginLiquidationInfo liqStartTime(String liqStartTime) {
    
    this.liqStartTime = liqStartTime;
    return this;
  }

   /**
   * Get liqStartTime
   * @return liqStartTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLiqStartTime() {
    return liqStartTime;
  }


  public void setLiqStartTime(String liqStartTime) {
    this.liqStartTime = liqStartTime;
  }


  public MarginLiquidationInfo totalAssets(String totalAssets) {
    
    this.totalAssets = totalAssets;
    return this;
  }

   /**
   * Get totalAssets
   * @return totalAssets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTotalAssets() {
    return totalAssets;
  }


  public void setTotalAssets(String totalAssets) {
    this.totalAssets = totalAssets;
  }


  public MarginLiquidationInfo totalDebt(String totalDebt) {
    
    this.totalDebt = totalDebt;
    return this;
  }

   /**
   * Get totalDebt
   * @return totalDebt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTotalDebt() {
    return totalDebt;
  }


  public void setTotalDebt(String totalDebt) {
    this.totalDebt = totalDebt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MarginLiquidationInfo instance itself
   */
  public MarginLiquidationInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarginLiquidationInfo marginLiquidationInfo = (MarginLiquidationInfo) o;
    return Objects.equals(this.ctime, marginLiquidationInfo.ctime) &&
        Objects.equals(this.liqEndTime, marginLiquidationInfo.liqEndTime) &&
        Objects.equals(this.liqFee, marginLiquidationInfo.liqFee) &&
        Objects.equals(this.liqId, marginLiquidationInfo.liqId) &&
        Objects.equals(this.liqRisk, marginLiquidationInfo.liqRisk) &&
        Objects.equals(this.liqStartTime, marginLiquidationInfo.liqStartTime) &&
        Objects.equals(this.totalAssets, marginLiquidationInfo.totalAssets) &&
        Objects.equals(this.totalDebt, marginLiquidationInfo.totalDebt)&&
        Objects.equals(this.additionalProperties, marginLiquidationInfo.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ctime, liqEndTime, liqFee, liqId, liqRisk, liqStartTime, totalAssets, totalDebt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarginLiquidationInfo {\n");
    sb.append("    ctime: ").append(toIndentedString(ctime)).append("\n");
    sb.append("    liqEndTime: ").append(toIndentedString(liqEndTime)).append("\n");
    sb.append("    liqFee: ").append(toIndentedString(liqFee)).append("\n");
    sb.append("    liqId: ").append(toIndentedString(liqId)).append("\n");
    sb.append("    liqRisk: ").append(toIndentedString(liqRisk)).append("\n");
    sb.append("    liqStartTime: ").append(toIndentedString(liqStartTime)).append("\n");
    sb.append("    totalAssets: ").append(toIndentedString(totalAssets)).append("\n");
    sb.append("    totalDebt: ").append(toIndentedString(totalDebt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ctime");
    openapiFields.add("liqEndTime");
    openapiFields.add("liqFee");
    openapiFields.add("liqId");
    openapiFields.add("liqRisk");
    openapiFields.add("liqStartTime");
    openapiFields.add("totalAssets");
    openapiFields.add("totalDebt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MarginLiquidationInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MarginLiquidationInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MarginLiquidationInfo is not found in the empty JSON string", MarginLiquidationInfo.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("ctime") != null && !jsonObj.get("ctime").isJsonNull()) && !jsonObj.get("ctime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ctime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ctime").toString()));
      }
      if ((jsonObj.get("liqEndTime") != null && !jsonObj.get("liqEndTime").isJsonNull()) && !jsonObj.get("liqEndTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liqEndTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liqEndTime").toString()));
      }
      if ((jsonObj.get("liqFee") != null && !jsonObj.get("liqFee").isJsonNull()) && !jsonObj.get("liqFee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liqFee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liqFee").toString()));
      }
      if ((jsonObj.get("liqId") != null && !jsonObj.get("liqId").isJsonNull()) && !jsonObj.get("liqId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liqId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liqId").toString()));
      }
      if ((jsonObj.get("liqRisk") != null && !jsonObj.get("liqRisk").isJsonNull()) && !jsonObj.get("liqRisk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liqRisk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liqRisk").toString()));
      }
      if ((jsonObj.get("liqStartTime") != null && !jsonObj.get("liqStartTime").isJsonNull()) && !jsonObj.get("liqStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liqStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liqStartTime").toString()));
      }
      if ((jsonObj.get("totalAssets") != null && !jsonObj.get("totalAssets").isJsonNull()) && !jsonObj.get("totalAssets").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalAssets` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalAssets").toString()));
      }
      if ((jsonObj.get("totalDebt") != null && !jsonObj.get("totalDebt").isJsonNull()) && !jsonObj.get("totalDebt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalDebt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalDebt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MarginLiquidationInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MarginLiquidationInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MarginLiquidationInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MarginLiquidationInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<MarginLiquidationInfo>() {
           @Override
           public void write(JsonWriter out, MarginLiquidationInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MarginLiquidationInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MarginLiquidationInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MarginLiquidationInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MarginLiquidationInfo
  * @throws IOException if the JSON string is invalid with respect to MarginLiquidationInfo
  */
  public static MarginLiquidationInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MarginLiquidationInfo.class);
  }

 /**
  * Convert an instance of MarginLiquidationInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

