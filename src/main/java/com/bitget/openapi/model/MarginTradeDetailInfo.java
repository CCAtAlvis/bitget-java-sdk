/*
 * Bitget Open API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bitget.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.bitget.openapi.JSON;

/**
 * MarginTradeDetailInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MarginTradeDetailInfo {
  public static final String SERIALIZED_NAME_CTIME = "ctime";
  @SerializedName(SERIALIZED_NAME_CTIME)
  private String ctime;

  public static final String SERIALIZED_NAME_FEE_CCY = "feeCcy";
  @SerializedName(SERIALIZED_NAME_FEE_CCY)
  private String feeCcy;

  public static final String SERIALIZED_NAME_FEES = "fees";
  @SerializedName(SERIALIZED_NAME_FEES)
  private String fees;

  public static final String SERIALIZED_NAME_FILL_ID = "fillId";
  @SerializedName(SERIALIZED_NAME_FILL_ID)
  private String fillId;

  public static final String SERIALIZED_NAME_FILL_PRICE = "fillPrice";
  @SerializedName(SERIALIZED_NAME_FILL_PRICE)
  private String fillPrice;

  public static final String SERIALIZED_NAME_FILL_QUANTITY = "fillQuantity";
  @SerializedName(SERIALIZED_NAME_FILL_QUANTITY)
  private String fillQuantity;

  public static final String SERIALIZED_NAME_FILL_TOTAL_AMOUNT = "fillTotalAmount";
  @SerializedName(SERIALIZED_NAME_FILL_TOTAL_AMOUNT)
  private String fillTotalAmount;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_ORDER_TYPE = "orderType";
  @SerializedName(SERIALIZED_NAME_ORDER_TYPE)
  private String orderType;

  public static final String SERIALIZED_NAME_SIDE = "side";
  @SerializedName(SERIALIZED_NAME_SIDE)
  private String side;

  public MarginTradeDetailInfo() {
  }

  public MarginTradeDetailInfo ctime(String ctime) {
    
    this.ctime = ctime;
    return this;
  }

   /**
   * Get ctime
   * @return ctime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCtime() {
    return ctime;
  }


  public void setCtime(String ctime) {
    this.ctime = ctime;
  }


  public MarginTradeDetailInfo feeCcy(String feeCcy) {
    
    this.feeCcy = feeCcy;
    return this;
  }

   /**
   * Get feeCcy
   * @return feeCcy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFeeCcy() {
    return feeCcy;
  }


  public void setFeeCcy(String feeCcy) {
    this.feeCcy = feeCcy;
  }


  public MarginTradeDetailInfo fees(String fees) {
    
    this.fees = fees;
    return this;
  }

   /**
   * Get fees
   * @return fees
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFees() {
    return fees;
  }


  public void setFees(String fees) {
    this.fees = fees;
  }


  public MarginTradeDetailInfo fillId(String fillId) {
    
    this.fillId = fillId;
    return this;
  }

   /**
   * Get fillId
   * @return fillId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFillId() {
    return fillId;
  }


  public void setFillId(String fillId) {
    this.fillId = fillId;
  }


  public MarginTradeDetailInfo fillPrice(String fillPrice) {
    
    this.fillPrice = fillPrice;
    return this;
  }

   /**
   * Get fillPrice
   * @return fillPrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFillPrice() {
    return fillPrice;
  }


  public void setFillPrice(String fillPrice) {
    this.fillPrice = fillPrice;
  }


  public MarginTradeDetailInfo fillQuantity(String fillQuantity) {
    
    this.fillQuantity = fillQuantity;
    return this;
  }

   /**
   * Get fillQuantity
   * @return fillQuantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFillQuantity() {
    return fillQuantity;
  }


  public void setFillQuantity(String fillQuantity) {
    this.fillQuantity = fillQuantity;
  }


  public MarginTradeDetailInfo fillTotalAmount(String fillTotalAmount) {
    
    this.fillTotalAmount = fillTotalAmount;
    return this;
  }

   /**
   * Get fillTotalAmount
   * @return fillTotalAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFillTotalAmount() {
    return fillTotalAmount;
  }


  public void setFillTotalAmount(String fillTotalAmount) {
    this.fillTotalAmount = fillTotalAmount;
  }


  public MarginTradeDetailInfo orderId(String orderId) {
    
    this.orderId = orderId;
    return this;
  }

   /**
   * Get orderId
   * @return orderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOrderId() {
    return orderId;
  }


  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public MarginTradeDetailInfo orderType(String orderType) {
    
    this.orderType = orderType;
    return this;
  }

   /**
   * Get orderType
   * @return orderType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOrderType() {
    return orderType;
  }


  public void setOrderType(String orderType) {
    this.orderType = orderType;
  }


  public MarginTradeDetailInfo side(String side) {
    
    this.side = side;
    return this;
  }

   /**
   * Get side
   * @return side
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSide() {
    return side;
  }


  public void setSide(String side) {
    this.side = side;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MarginTradeDetailInfo instance itself
   */
  public MarginTradeDetailInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarginTradeDetailInfo marginTradeDetailInfo = (MarginTradeDetailInfo) o;
    return Objects.equals(this.ctime, marginTradeDetailInfo.ctime) &&
        Objects.equals(this.feeCcy, marginTradeDetailInfo.feeCcy) &&
        Objects.equals(this.fees, marginTradeDetailInfo.fees) &&
        Objects.equals(this.fillId, marginTradeDetailInfo.fillId) &&
        Objects.equals(this.fillPrice, marginTradeDetailInfo.fillPrice) &&
        Objects.equals(this.fillQuantity, marginTradeDetailInfo.fillQuantity) &&
        Objects.equals(this.fillTotalAmount, marginTradeDetailInfo.fillTotalAmount) &&
        Objects.equals(this.orderId, marginTradeDetailInfo.orderId) &&
        Objects.equals(this.orderType, marginTradeDetailInfo.orderType) &&
        Objects.equals(this.side, marginTradeDetailInfo.side)&&
        Objects.equals(this.additionalProperties, marginTradeDetailInfo.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ctime, feeCcy, fees, fillId, fillPrice, fillQuantity, fillTotalAmount, orderId, orderType, side, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarginTradeDetailInfo {\n");
    sb.append("    ctime: ").append(toIndentedString(ctime)).append("\n");
    sb.append("    feeCcy: ").append(toIndentedString(feeCcy)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    fillId: ").append(toIndentedString(fillId)).append("\n");
    sb.append("    fillPrice: ").append(toIndentedString(fillPrice)).append("\n");
    sb.append("    fillQuantity: ").append(toIndentedString(fillQuantity)).append("\n");
    sb.append("    fillTotalAmount: ").append(toIndentedString(fillTotalAmount)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    orderType: ").append(toIndentedString(orderType)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ctime");
    openapiFields.add("feeCcy");
    openapiFields.add("fees");
    openapiFields.add("fillId");
    openapiFields.add("fillPrice");
    openapiFields.add("fillQuantity");
    openapiFields.add("fillTotalAmount");
    openapiFields.add("orderId");
    openapiFields.add("orderType");
    openapiFields.add("side");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MarginTradeDetailInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MarginTradeDetailInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MarginTradeDetailInfo is not found in the empty JSON string", MarginTradeDetailInfo.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("ctime") != null && !jsonObj.get("ctime").isJsonNull()) && !jsonObj.get("ctime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ctime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ctime").toString()));
      }
      if ((jsonObj.get("feeCcy") != null && !jsonObj.get("feeCcy").isJsonNull()) && !jsonObj.get("feeCcy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feeCcy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feeCcy").toString()));
      }
      if ((jsonObj.get("fees") != null && !jsonObj.get("fees").isJsonNull()) && !jsonObj.get("fees").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fees` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fees").toString()));
      }
      if ((jsonObj.get("fillId") != null && !jsonObj.get("fillId").isJsonNull()) && !jsonObj.get("fillId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fillId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fillId").toString()));
      }
      if ((jsonObj.get("fillPrice") != null && !jsonObj.get("fillPrice").isJsonNull()) && !jsonObj.get("fillPrice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fillPrice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fillPrice").toString()));
      }
      if ((jsonObj.get("fillQuantity") != null && !jsonObj.get("fillQuantity").isJsonNull()) && !jsonObj.get("fillQuantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fillQuantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fillQuantity").toString()));
      }
      if ((jsonObj.get("fillTotalAmount") != null && !jsonObj.get("fillTotalAmount").isJsonNull()) && !jsonObj.get("fillTotalAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fillTotalAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fillTotalAmount").toString()));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if ((jsonObj.get("orderType") != null && !jsonObj.get("orderType").isJsonNull()) && !jsonObj.get("orderType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderType").toString()));
      }
      if ((jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull()) && !jsonObj.get("side").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `side` to be a primitive type in the JSON string but got `%s`", jsonObj.get("side").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MarginTradeDetailInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MarginTradeDetailInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MarginTradeDetailInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MarginTradeDetailInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<MarginTradeDetailInfo>() {
           @Override
           public void write(JsonWriter out, MarginTradeDetailInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MarginTradeDetailInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MarginTradeDetailInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MarginTradeDetailInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MarginTradeDetailInfo
  * @throws IOException if the JSON string is invalid with respect to MarginTradeDetailInfo
  */
  public static MarginTradeDetailInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MarginTradeDetailInfo.class);
  }

 /**
  * Convert an instance of MarginTradeDetailInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

