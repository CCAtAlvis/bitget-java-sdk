/*
 * Bitget Open API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bitget.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.bitget.openapi.JSON;

/**
 * MarginOrderRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MarginOrderRequest {
  public static final String SERIALIZED_NAME_BASE_QUANTITY = "baseQuantity";
  @SerializedName(SERIALIZED_NAME_BASE_QUANTITY)
  private String baseQuantity;

  public static final String SERIALIZED_NAME_CHANNEL_API_CODE = "channelApiCode";
  @SerializedName(SERIALIZED_NAME_CHANNEL_API_CODE)
  private String channelApiCode;

  public static final String SERIALIZED_NAME_CLIENT_OID = "clientOid";
  @SerializedName(SERIALIZED_NAME_CLIENT_OID)
  private String clientOid;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_LOAN_TYPE = "loanType";
  @SerializedName(SERIALIZED_NAME_LOAN_TYPE)
  private String loanType;

  public static final String SERIALIZED_NAME_ORDER_TYPE = "orderType";
  @SerializedName(SERIALIZED_NAME_ORDER_TYPE)
  private String orderType;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private String price;

  public static final String SERIALIZED_NAME_QUOTE_AMOUNT = "quoteAmount";
  @SerializedName(SERIALIZED_NAME_QUOTE_AMOUNT)
  private String quoteAmount;

  public static final String SERIALIZED_NAME_SIDE = "side";
  @SerializedName(SERIALIZED_NAME_SIDE)
  private String side;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_TIME_IN_FORCE = "timeInForce";
  @SerializedName(SERIALIZED_NAME_TIME_IN_FORCE)
  private String timeInForce;

  public MarginOrderRequest() {
  }

  public MarginOrderRequest baseQuantity(String baseQuantity) {
    
    this.baseQuantity = baseQuantity;
    return this;
  }

   /**
   * baseQuantity
   * @return baseQuantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.2", value = "baseQuantity")

  public String getBaseQuantity() {
    return baseQuantity;
  }


  public void setBaseQuantity(String baseQuantity) {
    this.baseQuantity = baseQuantity;
  }


  public MarginOrderRequest channelApiCode(String channelApiCode) {
    
    this.channelApiCode = channelApiCode;
    return this;
  }

   /**
   * Get channelApiCode
   * @return channelApiCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getChannelApiCode() {
    return channelApiCode;
  }


  public void setChannelApiCode(String channelApiCode) {
    this.channelApiCode = channelApiCode;
  }


  public MarginOrderRequest clientOid(String clientOid) {
    
    this.clientOid = clientOid;
    return this;
  }

   /**
   * clientOid
   * @return clientOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "myId0001", value = "clientOid")

  public String getClientOid() {
    return clientOid;
  }


  public void setClientOid(String clientOid) {
    this.clientOid = clientOid;
  }


  public MarginOrderRequest ip(String ip) {
    
    this.ip = ip;
    return this;
  }

   /**
   * Get ip
   * @return ip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIp() {
    return ip;
  }


  public void setIp(String ip) {
    this.ip = ip;
  }


  public MarginOrderRequest loanType(String loanType) {
    
    this.loanType = loanType;
    return this;
  }

   /**
   * loanType
   * @return loanType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "normal/autoLoan/autoRepay", required = true, value = "loanType")

  public String getLoanType() {
    return loanType;
  }


  public void setLoanType(String loanType) {
    this.loanType = loanType;
  }


  public MarginOrderRequest orderType(String orderType) {
    
    this.orderType = orderType;
    return this;
  }

   /**
   * orderType
   * @return orderType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "limit/market", required = true, value = "orderType")

  public String getOrderType() {
    return orderType;
  }


  public void setOrderType(String orderType) {
    this.orderType = orderType;
  }


  public MarginOrderRequest price(String price) {
    
    this.price = price;
    return this;
  }

   /**
   * price
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "21000", value = "price")

  public String getPrice() {
    return price;
  }


  public void setPrice(String price) {
    this.price = price;
  }


  public MarginOrderRequest quoteAmount(String quoteAmount) {
    
    this.quoteAmount = quoteAmount;
    return this;
  }

   /**
   * quoteAmount
   * @return quoteAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2000", value = "quoteAmount")

  public String getQuoteAmount() {
    return quoteAmount;
  }


  public void setQuoteAmount(String quoteAmount) {
    this.quoteAmount = quoteAmount;
  }


  public MarginOrderRequest side(String side) {
    
    this.side = side;
    return this;
  }

   /**
   * side
   * @return side
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "sell/buy", required = true, value = "side")

  public String getSide() {
    return side;
  }


  public void setSide(String side) {
    this.side = side;
  }


  public MarginOrderRequest symbol(String symbol) {
    
    this.symbol = symbol;
    return this;
  }

   /**
   * symbol
   * @return symbol
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "BTCUSDT_SPBL", required = true, value = "symbol")

  public String getSymbol() {
    return symbol;
  }


  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public MarginOrderRequest timeInForce(String timeInForce) {
    
    this.timeInForce = timeInForce;
    return this;
  }

   /**
   * timeInForce
   * @return timeInForce
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "gtc", value = "timeInForce")

  public String getTimeInForce() {
    return timeInForce;
  }


  public void setTimeInForce(String timeInForce) {
    this.timeInForce = timeInForce;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MarginOrderRequest instance itself
   */
  public MarginOrderRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarginOrderRequest marginOrderRequest = (MarginOrderRequest) o;
    return Objects.equals(this.baseQuantity, marginOrderRequest.baseQuantity) &&
        Objects.equals(this.channelApiCode, marginOrderRequest.channelApiCode) &&
        Objects.equals(this.clientOid, marginOrderRequest.clientOid) &&
        Objects.equals(this.ip, marginOrderRequest.ip) &&
        Objects.equals(this.loanType, marginOrderRequest.loanType) &&
        Objects.equals(this.orderType, marginOrderRequest.orderType) &&
        Objects.equals(this.price, marginOrderRequest.price) &&
        Objects.equals(this.quoteAmount, marginOrderRequest.quoteAmount) &&
        Objects.equals(this.side, marginOrderRequest.side) &&
        Objects.equals(this.symbol, marginOrderRequest.symbol) &&
        Objects.equals(this.timeInForce, marginOrderRequest.timeInForce)&&
        Objects.equals(this.additionalProperties, marginOrderRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseQuantity, channelApiCode, clientOid, ip, loanType, orderType, price, quoteAmount, side, symbol, timeInForce, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarginOrderRequest {\n");
    sb.append("    baseQuantity: ").append(toIndentedString(baseQuantity)).append("\n");
    sb.append("    channelApiCode: ").append(toIndentedString(channelApiCode)).append("\n");
    sb.append("    clientOid: ").append(toIndentedString(clientOid)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    loanType: ").append(toIndentedString(loanType)).append("\n");
    sb.append("    orderType: ").append(toIndentedString(orderType)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    quoteAmount: ").append(toIndentedString(quoteAmount)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baseQuantity");
    openapiFields.add("channelApiCode");
    openapiFields.add("clientOid");
    openapiFields.add("ip");
    openapiFields.add("loanType");
    openapiFields.add("orderType");
    openapiFields.add("price");
    openapiFields.add("quoteAmount");
    openapiFields.add("side");
    openapiFields.add("symbol");
    openapiFields.add("timeInForce");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("loanType");
    openapiRequiredFields.add("orderType");
    openapiRequiredFields.add("side");
    openapiRequiredFields.add("symbol");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MarginOrderRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MarginOrderRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MarginOrderRequest is not found in the empty JSON string", MarginOrderRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MarginOrderRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("baseQuantity") != null && !jsonObj.get("baseQuantity").isJsonNull()) && !jsonObj.get("baseQuantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseQuantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseQuantity").toString()));
      }
      if ((jsonObj.get("channelApiCode") != null && !jsonObj.get("channelApiCode").isJsonNull()) && !jsonObj.get("channelApiCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelApiCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelApiCode").toString()));
      }
      if ((jsonObj.get("clientOid") != null && !jsonObj.get("clientOid").isJsonNull()) && !jsonObj.get("clientOid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientOid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientOid").toString()));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if (!jsonObj.get("loanType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loanType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loanType").toString()));
      }
      if (!jsonObj.get("orderType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderType").toString()));
      }
      if ((jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) && !jsonObj.get("price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price").toString()));
      }
      if ((jsonObj.get("quoteAmount") != null && !jsonObj.get("quoteAmount").isJsonNull()) && !jsonObj.get("quoteAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quoteAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quoteAmount").toString()));
      }
      if (!jsonObj.get("side").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `side` to be a primitive type in the JSON string but got `%s`", jsonObj.get("side").toString()));
      }
      if (!jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if ((jsonObj.get("timeInForce") != null && !jsonObj.get("timeInForce").isJsonNull()) && !jsonObj.get("timeInForce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeInForce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeInForce").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MarginOrderRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MarginOrderRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MarginOrderRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MarginOrderRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<MarginOrderRequest>() {
           @Override
           public void write(JsonWriter out, MarginOrderRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MarginOrderRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MarginOrderRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MarginOrderRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MarginOrderRequest
  * @throws IOException if the JSON string is invalid with respect to MarginOrderRequest
  */
  public static MarginOrderRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MarginOrderRequest.class);
  }

 /**
  * Convert an instance of MarginOrderRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

