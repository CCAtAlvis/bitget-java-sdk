/*
 * Bitget Open API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bitget.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.bitget.openapi.JSON;

/**
 * MerchantAdvUserLimitInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MerchantAdvUserLimitInfo {
  public static final String SERIALIZED_NAME_ALLOW_MERCHANT_PLACE = "allowMerchantPlace";
  @SerializedName(SERIALIZED_NAME_ALLOW_MERCHANT_PLACE)
  private String allowMerchantPlace;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_MAX_COMPLETE_NUM = "maxCompleteNum";
  @SerializedName(SERIALIZED_NAME_MAX_COMPLETE_NUM)
  private String maxCompleteNum;

  public static final String SERIALIZED_NAME_MIN_COMPLETE_NUM = "minCompleteNum";
  @SerializedName(SERIALIZED_NAME_MIN_COMPLETE_NUM)
  private String minCompleteNum;

  public static final String SERIALIZED_NAME_PLACE_ORDER_NUM = "placeOrderNum";
  @SerializedName(SERIALIZED_NAME_PLACE_ORDER_NUM)
  private String placeOrderNum;

  public static final String SERIALIZED_NAME_THIRTY_COMPLETE_RATE = "thirtyCompleteRate";
  @SerializedName(SERIALIZED_NAME_THIRTY_COMPLETE_RATE)
  private String thirtyCompleteRate;

  public MerchantAdvUserLimitInfo() {
  }

  public MerchantAdvUserLimitInfo allowMerchantPlace(String allowMerchantPlace) {
    
    this.allowMerchantPlace = allowMerchantPlace;
    return this;
  }

   /**
   * Get allowMerchantPlace
   * @return allowMerchantPlace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAllowMerchantPlace() {
    return allowMerchantPlace;
  }


  public void setAllowMerchantPlace(String allowMerchantPlace) {
    this.allowMerchantPlace = allowMerchantPlace;
  }


  public MerchantAdvUserLimitInfo country(String country) {
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    this.country = country;
  }


  public MerchantAdvUserLimitInfo maxCompleteNum(String maxCompleteNum) {
    
    this.maxCompleteNum = maxCompleteNum;
    return this;
  }

   /**
   * Get maxCompleteNum
   * @return maxCompleteNum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMaxCompleteNum() {
    return maxCompleteNum;
  }


  public void setMaxCompleteNum(String maxCompleteNum) {
    this.maxCompleteNum = maxCompleteNum;
  }


  public MerchantAdvUserLimitInfo minCompleteNum(String minCompleteNum) {
    
    this.minCompleteNum = minCompleteNum;
    return this;
  }

   /**
   * Get minCompleteNum
   * @return minCompleteNum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMinCompleteNum() {
    return minCompleteNum;
  }


  public void setMinCompleteNum(String minCompleteNum) {
    this.minCompleteNum = minCompleteNum;
  }


  public MerchantAdvUserLimitInfo placeOrderNum(String placeOrderNum) {
    
    this.placeOrderNum = placeOrderNum;
    return this;
  }

   /**
   * Get placeOrderNum
   * @return placeOrderNum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPlaceOrderNum() {
    return placeOrderNum;
  }


  public void setPlaceOrderNum(String placeOrderNum) {
    this.placeOrderNum = placeOrderNum;
  }


  public MerchantAdvUserLimitInfo thirtyCompleteRate(String thirtyCompleteRate) {
    
    this.thirtyCompleteRate = thirtyCompleteRate;
    return this;
  }

   /**
   * Get thirtyCompleteRate
   * @return thirtyCompleteRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getThirtyCompleteRate() {
    return thirtyCompleteRate;
  }


  public void setThirtyCompleteRate(String thirtyCompleteRate) {
    this.thirtyCompleteRate = thirtyCompleteRate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MerchantAdvUserLimitInfo instance itself
   */
  public MerchantAdvUserLimitInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantAdvUserLimitInfo merchantAdvUserLimitInfo = (MerchantAdvUserLimitInfo) o;
    return Objects.equals(this.allowMerchantPlace, merchantAdvUserLimitInfo.allowMerchantPlace) &&
        Objects.equals(this.country, merchantAdvUserLimitInfo.country) &&
        Objects.equals(this.maxCompleteNum, merchantAdvUserLimitInfo.maxCompleteNum) &&
        Objects.equals(this.minCompleteNum, merchantAdvUserLimitInfo.minCompleteNum) &&
        Objects.equals(this.placeOrderNum, merchantAdvUserLimitInfo.placeOrderNum) &&
        Objects.equals(this.thirtyCompleteRate, merchantAdvUserLimitInfo.thirtyCompleteRate)&&
        Objects.equals(this.additionalProperties, merchantAdvUserLimitInfo.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowMerchantPlace, country, maxCompleteNum, minCompleteNum, placeOrderNum, thirtyCompleteRate, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantAdvUserLimitInfo {\n");
    sb.append("    allowMerchantPlace: ").append(toIndentedString(allowMerchantPlace)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    maxCompleteNum: ").append(toIndentedString(maxCompleteNum)).append("\n");
    sb.append("    minCompleteNum: ").append(toIndentedString(minCompleteNum)).append("\n");
    sb.append("    placeOrderNum: ").append(toIndentedString(placeOrderNum)).append("\n");
    sb.append("    thirtyCompleteRate: ").append(toIndentedString(thirtyCompleteRate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowMerchantPlace");
    openapiFields.add("country");
    openapiFields.add("maxCompleteNum");
    openapiFields.add("minCompleteNum");
    openapiFields.add("placeOrderNum");
    openapiFields.add("thirtyCompleteRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MerchantAdvUserLimitInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MerchantAdvUserLimitInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MerchantAdvUserLimitInfo is not found in the empty JSON string", MerchantAdvUserLimitInfo.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("allowMerchantPlace") != null && !jsonObj.get("allowMerchantPlace").isJsonNull()) && !jsonObj.get("allowMerchantPlace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowMerchantPlace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowMerchantPlace").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("maxCompleteNum") != null && !jsonObj.get("maxCompleteNum").isJsonNull()) && !jsonObj.get("maxCompleteNum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxCompleteNum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxCompleteNum").toString()));
      }
      if ((jsonObj.get("minCompleteNum") != null && !jsonObj.get("minCompleteNum").isJsonNull()) && !jsonObj.get("minCompleteNum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minCompleteNum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minCompleteNum").toString()));
      }
      if ((jsonObj.get("placeOrderNum") != null && !jsonObj.get("placeOrderNum").isJsonNull()) && !jsonObj.get("placeOrderNum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placeOrderNum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placeOrderNum").toString()));
      }
      if ((jsonObj.get("thirtyCompleteRate") != null && !jsonObj.get("thirtyCompleteRate").isJsonNull()) && !jsonObj.get("thirtyCompleteRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thirtyCompleteRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thirtyCompleteRate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MerchantAdvUserLimitInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MerchantAdvUserLimitInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MerchantAdvUserLimitInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MerchantAdvUserLimitInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<MerchantAdvUserLimitInfo>() {
           @Override
           public void write(JsonWriter out, MerchantAdvUserLimitInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MerchantAdvUserLimitInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MerchantAdvUserLimitInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MerchantAdvUserLimitInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MerchantAdvUserLimitInfo
  * @throws IOException if the JSON string is invalid with respect to MerchantAdvUserLimitInfo
  */
  public static MerchantAdvUserLimitInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MerchantAdvUserLimitInfo.class);
  }

 /**
  * Convert an instance of MerchantAdvUserLimitInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

