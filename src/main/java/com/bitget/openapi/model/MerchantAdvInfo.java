/*
 * Bitget Open API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bitget.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.bitget.openapi.model.FiatPaymentInfo;
import com.bitget.openapi.model.MerchantAdvUserLimitInfo;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.bitget.openapi.JSON;

/**
 * MerchantAdvInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MerchantAdvInfo {
  public static final String SERIALIZED_NAME_ADV_ID = "advId";
  @SerializedName(SERIALIZED_NAME_ADV_ID)
  private String advId;

  public static final String SERIALIZED_NAME_ADV_NO = "advNo";
  @SerializedName(SERIALIZED_NAME_ADV_NO)
  private String advNo;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_COIN = "coin";
  @SerializedName(SERIALIZED_NAME_COIN)
  private String coin;

  public static final String SERIALIZED_NAME_COIN_PRECISION = "coinPrecision";
  @SerializedName(SERIALIZED_NAME_COIN_PRECISION)
  private String coinPrecision;

  public static final String SERIALIZED_NAME_CTIME = "ctime";
  @SerializedName(SERIALIZED_NAME_CTIME)
  private String ctime;

  public static final String SERIALIZED_NAME_DEAL_AMOUNT = "dealAmount";
  @SerializedName(SERIALIZED_NAME_DEAL_AMOUNT)
  private String dealAmount;

  public static final String SERIALIZED_NAME_FIAT_CODE = "fiatCode";
  @SerializedName(SERIALIZED_NAME_FIAT_CODE)
  private String fiatCode;

  public static final String SERIALIZED_NAME_FIAT_PRECISION = "fiatPrecision";
  @SerializedName(SERIALIZED_NAME_FIAT_PRECISION)
  private String fiatPrecision;

  public static final String SERIALIZED_NAME_FIAT_SYMBOL = "fiatSymbol";
  @SerializedName(SERIALIZED_NAME_FIAT_SYMBOL)
  private String fiatSymbol;

  public static final String SERIALIZED_NAME_HIDE = "hide";
  @SerializedName(SERIALIZED_NAME_HIDE)
  private String hide;

  public static final String SERIALIZED_NAME_MAX_AMOUNT = "maxAmount";
  @SerializedName(SERIALIZED_NAME_MAX_AMOUNT)
  private String maxAmount;

  public static final String SERIALIZED_NAME_MIN_AMOUNT = "minAmount";
  @SerializedName(SERIALIZED_NAME_MIN_AMOUNT)
  private String minAmount;

  public static final String SERIALIZED_NAME_PAY_DURATION = "payDuration";
  @SerializedName(SERIALIZED_NAME_PAY_DURATION)
  private String payDuration;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "paymentMethod";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private List<FiatPaymentInfo> paymentMethod = null;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private String price;

  public static final String SERIALIZED_NAME_REMARK = "remark";
  @SerializedName(SERIALIZED_NAME_REMARK)
  private String remark;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TURNOVER_NUM = "turnoverNum";
  @SerializedName(SERIALIZED_NAME_TURNOVER_NUM)
  private String turnoverNum;

  public static final String SERIALIZED_NAME_TURNOVER_RATE = "turnoverRate";
  @SerializedName(SERIALIZED_NAME_TURNOVER_RATE)
  private String turnoverRate;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USER_LIMIT = "userLimit";
  @SerializedName(SERIALIZED_NAME_USER_LIMIT)
  private MerchantAdvUserLimitInfo userLimit;

  public MerchantAdvInfo() {
  }

  public MerchantAdvInfo advId(String advId) {
    
    this.advId = advId;
    return this;
  }

   /**
   * Get advId
   * @return advId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAdvId() {
    return advId;
  }


  public void setAdvId(String advId) {
    this.advId = advId;
  }


  public MerchantAdvInfo advNo(String advNo) {
    
    this.advNo = advNo;
    return this;
  }

   /**
   * Get advNo
   * @return advNo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAdvNo() {
    return advNo;
  }


  public void setAdvNo(String advNo) {
    this.advNo = advNo;
  }


  public MerchantAdvInfo amount(String amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    this.amount = amount;
  }


  public MerchantAdvInfo coin(String coin) {
    
    this.coin = coin;
    return this;
  }

   /**
   * Get coin
   * @return coin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCoin() {
    return coin;
  }


  public void setCoin(String coin) {
    this.coin = coin;
  }


  public MerchantAdvInfo coinPrecision(String coinPrecision) {
    
    this.coinPrecision = coinPrecision;
    return this;
  }

   /**
   * Get coinPrecision
   * @return coinPrecision
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCoinPrecision() {
    return coinPrecision;
  }


  public void setCoinPrecision(String coinPrecision) {
    this.coinPrecision = coinPrecision;
  }


  public MerchantAdvInfo ctime(String ctime) {
    
    this.ctime = ctime;
    return this;
  }

   /**
   * Get ctime
   * @return ctime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCtime() {
    return ctime;
  }


  public void setCtime(String ctime) {
    this.ctime = ctime;
  }


  public MerchantAdvInfo dealAmount(String dealAmount) {
    
    this.dealAmount = dealAmount;
    return this;
  }

   /**
   * Get dealAmount
   * @return dealAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDealAmount() {
    return dealAmount;
  }


  public void setDealAmount(String dealAmount) {
    this.dealAmount = dealAmount;
  }


  public MerchantAdvInfo fiatCode(String fiatCode) {
    
    this.fiatCode = fiatCode;
    return this;
  }

   /**
   * Get fiatCode
   * @return fiatCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFiatCode() {
    return fiatCode;
  }


  public void setFiatCode(String fiatCode) {
    this.fiatCode = fiatCode;
  }


  public MerchantAdvInfo fiatPrecision(String fiatPrecision) {
    
    this.fiatPrecision = fiatPrecision;
    return this;
  }

   /**
   * Get fiatPrecision
   * @return fiatPrecision
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFiatPrecision() {
    return fiatPrecision;
  }


  public void setFiatPrecision(String fiatPrecision) {
    this.fiatPrecision = fiatPrecision;
  }


  public MerchantAdvInfo fiatSymbol(String fiatSymbol) {
    
    this.fiatSymbol = fiatSymbol;
    return this;
  }

   /**
   * Get fiatSymbol
   * @return fiatSymbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFiatSymbol() {
    return fiatSymbol;
  }


  public void setFiatSymbol(String fiatSymbol) {
    this.fiatSymbol = fiatSymbol;
  }


  public MerchantAdvInfo hide(String hide) {
    
    this.hide = hide;
    return this;
  }

   /**
   * Get hide
   * @return hide
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHide() {
    return hide;
  }


  public void setHide(String hide) {
    this.hide = hide;
  }


  public MerchantAdvInfo maxAmount(String maxAmount) {
    
    this.maxAmount = maxAmount;
    return this;
  }

   /**
   * Get maxAmount
   * @return maxAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMaxAmount() {
    return maxAmount;
  }


  public void setMaxAmount(String maxAmount) {
    this.maxAmount = maxAmount;
  }


  public MerchantAdvInfo minAmount(String minAmount) {
    
    this.minAmount = minAmount;
    return this;
  }

   /**
   * Get minAmount
   * @return minAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMinAmount() {
    return minAmount;
  }


  public void setMinAmount(String minAmount) {
    this.minAmount = minAmount;
  }


  public MerchantAdvInfo payDuration(String payDuration) {
    
    this.payDuration = payDuration;
    return this;
  }

   /**
   * Get payDuration
   * @return payDuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPayDuration() {
    return payDuration;
  }


  public void setPayDuration(String payDuration) {
    this.payDuration = payDuration;
  }


  public MerchantAdvInfo paymentMethod(List<FiatPaymentInfo> paymentMethod) {
    
    this.paymentMethod = paymentMethod;
    return this;
  }

  public MerchantAdvInfo addPaymentMethodItem(FiatPaymentInfo paymentMethodItem) {
    if (this.paymentMethod == null) {
      this.paymentMethod = new ArrayList<>();
    }
    this.paymentMethod.add(paymentMethodItem);
    return this;
  }

   /**
   * Get paymentMethod
   * @return paymentMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<FiatPaymentInfo> getPaymentMethod() {
    return paymentMethod;
  }


  public void setPaymentMethod(List<FiatPaymentInfo> paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public MerchantAdvInfo price(String price) {
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPrice() {
    return price;
  }


  public void setPrice(String price) {
    this.price = price;
  }


  public MerchantAdvInfo remark(String remark) {
    
    this.remark = remark;
    return this;
  }

   /**
   * Get remark
   * @return remark
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRemark() {
    return remark;
  }


  public void setRemark(String remark) {
    this.remark = remark;
  }


  public MerchantAdvInfo status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public MerchantAdvInfo turnoverNum(String turnoverNum) {
    
    this.turnoverNum = turnoverNum;
    return this;
  }

   /**
   * Get turnoverNum
   * @return turnoverNum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTurnoverNum() {
    return turnoverNum;
  }


  public void setTurnoverNum(String turnoverNum) {
    this.turnoverNum = turnoverNum;
  }


  public MerchantAdvInfo turnoverRate(String turnoverRate) {
    
    this.turnoverRate = turnoverRate;
    return this;
  }

   /**
   * Get turnoverRate
   * @return turnoverRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTurnoverRate() {
    return turnoverRate;
  }


  public void setTurnoverRate(String turnoverRate) {
    this.turnoverRate = turnoverRate;
  }


  public MerchantAdvInfo type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public MerchantAdvInfo userLimit(MerchantAdvUserLimitInfo userLimit) {
    
    this.userLimit = userLimit;
    return this;
  }

   /**
   * Get userLimit
   * @return userLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MerchantAdvUserLimitInfo getUserLimit() {
    return userLimit;
  }


  public void setUserLimit(MerchantAdvUserLimitInfo userLimit) {
    this.userLimit = userLimit;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MerchantAdvInfo instance itself
   */
  public MerchantAdvInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantAdvInfo merchantAdvInfo = (MerchantAdvInfo) o;
    return Objects.equals(this.advId, merchantAdvInfo.advId) &&
        Objects.equals(this.advNo, merchantAdvInfo.advNo) &&
        Objects.equals(this.amount, merchantAdvInfo.amount) &&
        Objects.equals(this.coin, merchantAdvInfo.coin) &&
        Objects.equals(this.coinPrecision, merchantAdvInfo.coinPrecision) &&
        Objects.equals(this.ctime, merchantAdvInfo.ctime) &&
        Objects.equals(this.dealAmount, merchantAdvInfo.dealAmount) &&
        Objects.equals(this.fiatCode, merchantAdvInfo.fiatCode) &&
        Objects.equals(this.fiatPrecision, merchantAdvInfo.fiatPrecision) &&
        Objects.equals(this.fiatSymbol, merchantAdvInfo.fiatSymbol) &&
        Objects.equals(this.hide, merchantAdvInfo.hide) &&
        Objects.equals(this.maxAmount, merchantAdvInfo.maxAmount) &&
        Objects.equals(this.minAmount, merchantAdvInfo.minAmount) &&
        Objects.equals(this.payDuration, merchantAdvInfo.payDuration) &&
        Objects.equals(this.paymentMethod, merchantAdvInfo.paymentMethod) &&
        Objects.equals(this.price, merchantAdvInfo.price) &&
        Objects.equals(this.remark, merchantAdvInfo.remark) &&
        Objects.equals(this.status, merchantAdvInfo.status) &&
        Objects.equals(this.turnoverNum, merchantAdvInfo.turnoverNum) &&
        Objects.equals(this.turnoverRate, merchantAdvInfo.turnoverRate) &&
        Objects.equals(this.type, merchantAdvInfo.type) &&
        Objects.equals(this.userLimit, merchantAdvInfo.userLimit)&&
        Objects.equals(this.additionalProperties, merchantAdvInfo.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advId, advNo, amount, coin, coinPrecision, ctime, dealAmount, fiatCode, fiatPrecision, fiatSymbol, hide, maxAmount, minAmount, payDuration, paymentMethod, price, remark, status, turnoverNum, turnoverRate, type, userLimit, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantAdvInfo {\n");
    sb.append("    advId: ").append(toIndentedString(advId)).append("\n");
    sb.append("    advNo: ").append(toIndentedString(advNo)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    coin: ").append(toIndentedString(coin)).append("\n");
    sb.append("    coinPrecision: ").append(toIndentedString(coinPrecision)).append("\n");
    sb.append("    ctime: ").append(toIndentedString(ctime)).append("\n");
    sb.append("    dealAmount: ").append(toIndentedString(dealAmount)).append("\n");
    sb.append("    fiatCode: ").append(toIndentedString(fiatCode)).append("\n");
    sb.append("    fiatPrecision: ").append(toIndentedString(fiatPrecision)).append("\n");
    sb.append("    fiatSymbol: ").append(toIndentedString(fiatSymbol)).append("\n");
    sb.append("    hide: ").append(toIndentedString(hide)).append("\n");
    sb.append("    maxAmount: ").append(toIndentedString(maxAmount)).append("\n");
    sb.append("    minAmount: ").append(toIndentedString(minAmount)).append("\n");
    sb.append("    payDuration: ").append(toIndentedString(payDuration)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    remark: ").append(toIndentedString(remark)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    turnoverNum: ").append(toIndentedString(turnoverNum)).append("\n");
    sb.append("    turnoverRate: ").append(toIndentedString(turnoverRate)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userLimit: ").append(toIndentedString(userLimit)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advId");
    openapiFields.add("advNo");
    openapiFields.add("amount");
    openapiFields.add("coin");
    openapiFields.add("coinPrecision");
    openapiFields.add("ctime");
    openapiFields.add("dealAmount");
    openapiFields.add("fiatCode");
    openapiFields.add("fiatPrecision");
    openapiFields.add("fiatSymbol");
    openapiFields.add("hide");
    openapiFields.add("maxAmount");
    openapiFields.add("minAmount");
    openapiFields.add("payDuration");
    openapiFields.add("paymentMethod");
    openapiFields.add("price");
    openapiFields.add("remark");
    openapiFields.add("status");
    openapiFields.add("turnoverNum");
    openapiFields.add("turnoverRate");
    openapiFields.add("type");
    openapiFields.add("userLimit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MerchantAdvInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MerchantAdvInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MerchantAdvInfo is not found in the empty JSON string", MerchantAdvInfo.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("advId") != null && !jsonObj.get("advId").isJsonNull()) && !jsonObj.get("advId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advId").toString()));
      }
      if ((jsonObj.get("advNo") != null && !jsonObj.get("advNo").isJsonNull()) && !jsonObj.get("advNo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advNo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advNo").toString()));
      }
      if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if ((jsonObj.get("coin") != null && !jsonObj.get("coin").isJsonNull()) && !jsonObj.get("coin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coin").toString()));
      }
      if ((jsonObj.get("coinPrecision") != null && !jsonObj.get("coinPrecision").isJsonNull()) && !jsonObj.get("coinPrecision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coinPrecision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coinPrecision").toString()));
      }
      if ((jsonObj.get("ctime") != null && !jsonObj.get("ctime").isJsonNull()) && !jsonObj.get("ctime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ctime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ctime").toString()));
      }
      if ((jsonObj.get("dealAmount") != null && !jsonObj.get("dealAmount").isJsonNull()) && !jsonObj.get("dealAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dealAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dealAmount").toString()));
      }
      if ((jsonObj.get("fiatCode") != null && !jsonObj.get("fiatCode").isJsonNull()) && !jsonObj.get("fiatCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fiatCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fiatCode").toString()));
      }
      if ((jsonObj.get("fiatPrecision") != null && !jsonObj.get("fiatPrecision").isJsonNull()) && !jsonObj.get("fiatPrecision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fiatPrecision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fiatPrecision").toString()));
      }
      if ((jsonObj.get("fiatSymbol") != null && !jsonObj.get("fiatSymbol").isJsonNull()) && !jsonObj.get("fiatSymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fiatSymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fiatSymbol").toString()));
      }
      if ((jsonObj.get("hide") != null && !jsonObj.get("hide").isJsonNull()) && !jsonObj.get("hide").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hide` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hide").toString()));
      }
      if ((jsonObj.get("maxAmount") != null && !jsonObj.get("maxAmount").isJsonNull()) && !jsonObj.get("maxAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxAmount").toString()));
      }
      if ((jsonObj.get("minAmount") != null && !jsonObj.get("minAmount").isJsonNull()) && !jsonObj.get("minAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minAmount").toString()));
      }
      if ((jsonObj.get("payDuration") != null && !jsonObj.get("payDuration").isJsonNull()) && !jsonObj.get("payDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payDuration").toString()));
      }
      if (jsonObj.get("paymentMethod") != null && !jsonObj.get("paymentMethod").isJsonNull()) {
        JsonArray jsonArraypaymentMethod = jsonObj.getAsJsonArray("paymentMethod");
        if (jsonArraypaymentMethod != null) {
          // ensure the json data is an array
          if (!jsonObj.get("paymentMethod").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `paymentMethod` to be an array in the JSON string but got `%s`", jsonObj.get("paymentMethod").toString()));
          }

          // validate the optional field `paymentMethod` (array)
          for (int i = 0; i < jsonArraypaymentMethod.size(); i++) {
            FiatPaymentInfo.validateJsonObject(jsonArraypaymentMethod.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) && !jsonObj.get("price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price").toString()));
      }
      if ((jsonObj.get("remark") != null && !jsonObj.get("remark").isJsonNull()) && !jsonObj.get("remark").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remark` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remark").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("turnoverNum") != null && !jsonObj.get("turnoverNum").isJsonNull()) && !jsonObj.get("turnoverNum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `turnoverNum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("turnoverNum").toString()));
      }
      if ((jsonObj.get("turnoverRate") != null && !jsonObj.get("turnoverRate").isJsonNull()) && !jsonObj.get("turnoverRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `turnoverRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("turnoverRate").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `userLimit`
      if (jsonObj.get("userLimit") != null && !jsonObj.get("userLimit").isJsonNull()) {
        MerchantAdvUserLimitInfo.validateJsonObject(jsonObj.getAsJsonObject("userLimit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MerchantAdvInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MerchantAdvInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MerchantAdvInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MerchantAdvInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<MerchantAdvInfo>() {
           @Override
           public void write(JsonWriter out, MerchantAdvInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MerchantAdvInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MerchantAdvInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MerchantAdvInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MerchantAdvInfo
  * @throws IOException if the JSON string is invalid with respect to MerchantAdvInfo
  */
  public static MerchantAdvInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MerchantAdvInfo.class);
  }

 /**
  * Convert an instance of MerchantAdvInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

