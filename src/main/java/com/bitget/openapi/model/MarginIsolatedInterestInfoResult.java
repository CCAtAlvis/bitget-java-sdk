/*
 * Bitget Open API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bitget.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.bitget.openapi.model.MarginIsolatedInterestInfo;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.bitget.openapi.JSON;

/**
 * MarginIsolatedInterestInfoResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MarginIsolatedInterestInfoResult {
  public static final String SERIALIZED_NAME_MAX_ID = "maxId";
  @SerializedName(SERIALIZED_NAME_MAX_ID)
  private String maxId;

  public static final String SERIALIZED_NAME_MIN_ID = "minId";
  @SerializedName(SERIALIZED_NAME_MIN_ID)
  private String minId;

  public static final String SERIALIZED_NAME_RESULT_LIST = "resultList";
  @SerializedName(SERIALIZED_NAME_RESULT_LIST)
  private List<MarginIsolatedInterestInfo> resultList = null;

  public MarginIsolatedInterestInfoResult() {
  }

  public MarginIsolatedInterestInfoResult maxId(String maxId) {
    
    this.maxId = maxId;
    return this;
  }

   /**
   * Get maxId
   * @return maxId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMaxId() {
    return maxId;
  }


  public void setMaxId(String maxId) {
    this.maxId = maxId;
  }


  public MarginIsolatedInterestInfoResult minId(String minId) {
    
    this.minId = minId;
    return this;
  }

   /**
   * Get minId
   * @return minId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMinId() {
    return minId;
  }


  public void setMinId(String minId) {
    this.minId = minId;
  }


  public MarginIsolatedInterestInfoResult resultList(List<MarginIsolatedInterestInfo> resultList) {
    
    this.resultList = resultList;
    return this;
  }

  public MarginIsolatedInterestInfoResult addResultListItem(MarginIsolatedInterestInfo resultListItem) {
    if (this.resultList == null) {
      this.resultList = new ArrayList<>();
    }
    this.resultList.add(resultListItem);
    return this;
  }

   /**
   * Get resultList
   * @return resultList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<MarginIsolatedInterestInfo> getResultList() {
    return resultList;
  }


  public void setResultList(List<MarginIsolatedInterestInfo> resultList) {
    this.resultList = resultList;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MarginIsolatedInterestInfoResult instance itself
   */
  public MarginIsolatedInterestInfoResult putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarginIsolatedInterestInfoResult marginIsolatedInterestInfoResult = (MarginIsolatedInterestInfoResult) o;
    return Objects.equals(this.maxId, marginIsolatedInterestInfoResult.maxId) &&
        Objects.equals(this.minId, marginIsolatedInterestInfoResult.minId) &&
        Objects.equals(this.resultList, marginIsolatedInterestInfoResult.resultList)&&
        Objects.equals(this.additionalProperties, marginIsolatedInterestInfoResult.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxId, minId, resultList, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarginIsolatedInterestInfoResult {\n");
    sb.append("    maxId: ").append(toIndentedString(maxId)).append("\n");
    sb.append("    minId: ").append(toIndentedString(minId)).append("\n");
    sb.append("    resultList: ").append(toIndentedString(resultList)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxId");
    openapiFields.add("minId");
    openapiFields.add("resultList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MarginIsolatedInterestInfoResult
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MarginIsolatedInterestInfoResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MarginIsolatedInterestInfoResult is not found in the empty JSON string", MarginIsolatedInterestInfoResult.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("maxId") != null && !jsonObj.get("maxId").isJsonNull()) && !jsonObj.get("maxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxId").toString()));
      }
      if ((jsonObj.get("minId") != null && !jsonObj.get("minId").isJsonNull()) && !jsonObj.get("minId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minId").toString()));
      }
      if (jsonObj.get("resultList") != null && !jsonObj.get("resultList").isJsonNull()) {
        JsonArray jsonArrayresultList = jsonObj.getAsJsonArray("resultList");
        if (jsonArrayresultList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resultList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resultList` to be an array in the JSON string but got `%s`", jsonObj.get("resultList").toString()));
          }

          // validate the optional field `resultList` (array)
          for (int i = 0; i < jsonArrayresultList.size(); i++) {
            MarginIsolatedInterestInfo.validateJsonObject(jsonArrayresultList.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MarginIsolatedInterestInfoResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MarginIsolatedInterestInfoResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MarginIsolatedInterestInfoResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MarginIsolatedInterestInfoResult.class));

       return (TypeAdapter<T>) new TypeAdapter<MarginIsolatedInterestInfoResult>() {
           @Override
           public void write(JsonWriter out, MarginIsolatedInterestInfoResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MarginIsolatedInterestInfoResult read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MarginIsolatedInterestInfoResult instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MarginIsolatedInterestInfoResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MarginIsolatedInterestInfoResult
  * @throws IOException if the JSON string is invalid with respect to MarginIsolatedInterestInfoResult
  */
  public static MarginIsolatedInterestInfoResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MarginIsolatedInterestInfoResult.class);
  }

 /**
  * Convert an instance of MarginIsolatedInterestInfoResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

