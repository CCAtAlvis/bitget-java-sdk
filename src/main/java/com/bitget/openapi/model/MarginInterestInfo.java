/*
 * Bitget Open API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bitget.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.bitget.openapi.JSON;

/**
 * MarginInterestInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MarginInterestInfo {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_CTIME = "ctime";
  @SerializedName(SERIALIZED_NAME_CTIME)
  private String ctime;

  public static final String SERIALIZED_NAME_INTEREST_COIN = "interestCoin";
  @SerializedName(SERIALIZED_NAME_INTEREST_COIN)
  private String interestCoin;

  public static final String SERIALIZED_NAME_INTEREST_ID = "interestId";
  @SerializedName(SERIALIZED_NAME_INTEREST_ID)
  private String interestId;

  public static final String SERIALIZED_NAME_INTEREST_RATE = "interestRate";
  @SerializedName(SERIALIZED_NAME_INTEREST_RATE)
  private String interestRate;

  public static final String SERIALIZED_NAME_LOAN_COIN = "loanCoin";
  @SerializedName(SERIALIZED_NAME_LOAN_COIN)
  private String loanCoin;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public MarginInterestInfo() {
  }

  public MarginInterestInfo amount(String amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    this.amount = amount;
  }


  public MarginInterestInfo ctime(String ctime) {
    
    this.ctime = ctime;
    return this;
  }

   /**
   * Get ctime
   * @return ctime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCtime() {
    return ctime;
  }


  public void setCtime(String ctime) {
    this.ctime = ctime;
  }


  public MarginInterestInfo interestCoin(String interestCoin) {
    
    this.interestCoin = interestCoin;
    return this;
  }

   /**
   * Get interestCoin
   * @return interestCoin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getInterestCoin() {
    return interestCoin;
  }


  public void setInterestCoin(String interestCoin) {
    this.interestCoin = interestCoin;
  }


  public MarginInterestInfo interestId(String interestId) {
    
    this.interestId = interestId;
    return this;
  }

   /**
   * Get interestId
   * @return interestId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getInterestId() {
    return interestId;
  }


  public void setInterestId(String interestId) {
    this.interestId = interestId;
  }


  public MarginInterestInfo interestRate(String interestRate) {
    
    this.interestRate = interestRate;
    return this;
  }

   /**
   * Get interestRate
   * @return interestRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getInterestRate() {
    return interestRate;
  }


  public void setInterestRate(String interestRate) {
    this.interestRate = interestRate;
  }


  public MarginInterestInfo loanCoin(String loanCoin) {
    
    this.loanCoin = loanCoin;
    return this;
  }

   /**
   * Get loanCoin
   * @return loanCoin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLoanCoin() {
    return loanCoin;
  }


  public void setLoanCoin(String loanCoin) {
    this.loanCoin = loanCoin;
  }


  public MarginInterestInfo type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MarginInterestInfo instance itself
   */
  public MarginInterestInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarginInterestInfo marginInterestInfo = (MarginInterestInfo) o;
    return Objects.equals(this.amount, marginInterestInfo.amount) &&
        Objects.equals(this.ctime, marginInterestInfo.ctime) &&
        Objects.equals(this.interestCoin, marginInterestInfo.interestCoin) &&
        Objects.equals(this.interestId, marginInterestInfo.interestId) &&
        Objects.equals(this.interestRate, marginInterestInfo.interestRate) &&
        Objects.equals(this.loanCoin, marginInterestInfo.loanCoin) &&
        Objects.equals(this.type, marginInterestInfo.type)&&
        Objects.equals(this.additionalProperties, marginInterestInfo.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, ctime, interestCoin, interestId, interestRate, loanCoin, type, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarginInterestInfo {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    ctime: ").append(toIndentedString(ctime)).append("\n");
    sb.append("    interestCoin: ").append(toIndentedString(interestCoin)).append("\n");
    sb.append("    interestId: ").append(toIndentedString(interestId)).append("\n");
    sb.append("    interestRate: ").append(toIndentedString(interestRate)).append("\n");
    sb.append("    loanCoin: ").append(toIndentedString(loanCoin)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("ctime");
    openapiFields.add("interestCoin");
    openapiFields.add("interestId");
    openapiFields.add("interestRate");
    openapiFields.add("loanCoin");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MarginInterestInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MarginInterestInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MarginInterestInfo is not found in the empty JSON string", MarginInterestInfo.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if ((jsonObj.get("ctime") != null && !jsonObj.get("ctime").isJsonNull()) && !jsonObj.get("ctime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ctime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ctime").toString()));
      }
      if ((jsonObj.get("interestCoin") != null && !jsonObj.get("interestCoin").isJsonNull()) && !jsonObj.get("interestCoin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interestCoin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interestCoin").toString()));
      }
      if ((jsonObj.get("interestId") != null && !jsonObj.get("interestId").isJsonNull()) && !jsonObj.get("interestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interestId").toString()));
      }
      if ((jsonObj.get("interestRate") != null && !jsonObj.get("interestRate").isJsonNull()) && !jsonObj.get("interestRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interestRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interestRate").toString()));
      }
      if ((jsonObj.get("loanCoin") != null && !jsonObj.get("loanCoin").isJsonNull()) && !jsonObj.get("loanCoin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loanCoin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loanCoin").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MarginInterestInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MarginInterestInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MarginInterestInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MarginInterestInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<MarginInterestInfo>() {
           @Override
           public void write(JsonWriter out, MarginInterestInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MarginInterestInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MarginInterestInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MarginInterestInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MarginInterestInfo
  * @throws IOException if the JSON string is invalid with respect to MarginInterestInfo
  */
  public static MarginInterestInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MarginInterestInfo.class);
  }

 /**
  * Convert an instance of MarginInterestInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

