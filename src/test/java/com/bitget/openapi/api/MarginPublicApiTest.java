/*
 * Bitget Open API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bitget.openapi.api;

import com.bitget.openapi.ApiConfig;
import com.bitget.openapi.ApiException;
import com.bitget.openapi.model.ApiResponseResultOfListOfMarginSystemResult;
import com.bitget.openapi.model.ApiResponseResultOfVoid;
import com.bitget.openapi.model.MarginSystemResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * API tests for MarginPublicApi
 */
public class MarginPublicApiTest {

    private final MarginPublicApi api = new MarginPublicApi(ApiConfig.getConfig());

    /**
     * currencies
     *
     * Get Currencies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void marginPublicCurrenciesTest() throws ApiException {
        ApiResponseResultOfListOfMarginSystemResult response = api.marginPublicCurrencies();
        assertThat(response).isNotNull();
        assertThat(response.getCode()).isEqualTo(("00000"));
        assertThat(response.getData()).isNotNull();
        for(MarginSystemResult item : response.getData()){
            assertThat(item).isNotNull();
            assertThat(item.getBaseCoin()).isNotNull();
            assertThat(item.getSymbol()).isNotNull();
            assertThat(item.getIsBorrowable()).isNotNull();
            assertThat(item.getMakerFeeRate()).isNotNull();
            assertThat(item.getMaxCrossLeverage()).isNotNull();
            assertThat(item.getMaxIsolatedLeverage()).isNotNull();
            assertThat(item.getMaxTradeAmount()).isNotNull();
            assertThat(item.getMinTradeUSDT()).isNotNull();
            assertThat(item.getPriceScale()).isNotNull();
            assertThat(item.getQuoteCoin()).isNotNull();
            assertThat(item.getStatus()).isNotNull();
            assertThat(item.getTakerFeeRate()).isNotNull();
            assertThat(item.getUserMinBorrow()).isNotNull();
            assertThat(item.getWarningRiskRatio()).isNotNull();
        }
    }

}
