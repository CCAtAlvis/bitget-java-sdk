/*
 * Bitget Open API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bitget.openapi.api;

import com.bitget.openapi.ApiConfig;
import com.bitget.openapi.ApiException;
import com.bitget.openapi.model.*;
import com.google.gson.JsonObject;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * API tests for MarginCrossAccountApi
 */
public class MarginCrossAccountApiTest {

    private final MarginCrossAccountApi api = new MarginCrossAccountApi(ApiConfig.getConfig());

    /**
     * assets
     *
     * Get Assets
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void marginCrossAccountAssetsTest() throws ApiException {
        String coin = "USDT";
        ApiResponseResultOfListOfMarginCrossAssetsPopulationResult response = api.marginCrossAccountAssets(coin);
        assertThat(response).isNotNull();
        assertThat(response.getData()).isNotNull();
        for(MarginCrossAssetsPopulationResult item : response.getData()){
            assertThat(item).isNotNull();
            assertThat(item.getAvailable()).isNotNull();
            assertThat(item.getBorrow()).isNotNull();
            assertThat(item.getCoin()).isNotNull();
            assertThat(item.getCtime()).isNotNull();
            assertThat(item.getFrozen()).isNotNull();
            assertThat(item.getInterest()).isNotNull();
            assertThat(item.getNet()).isNotNull();
            assertThat(item.getTotalAmount()).isNotNull();
        }
    }

    /**
     * borrow
     *
     * borrow
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void marginCrossAccountBorrowTest() throws ApiException {
        MarginCrossLimitRequest marginCrossLimitRequest = new MarginCrossLimitRequest();
        marginCrossLimitRequest.setBorrowAmount("1");
        marginCrossLimitRequest.setCoin("USDT");
        ApiResponseResultOfMarginCrossBorrowLimitResult response = api.marginCrossAccountBorrow(marginCrossLimitRequest);
        assertThat(response).isNotNull();
        assertThat(response.getCode()).isEqualTo(("00000"));
        assertThat(response.getData()).isNotNull();
        assertThat(response.getData().getCoin()).isNotNull();
        assertThat(response.getData().getBorrowAmount()).isNotNull();

    }

    /**
     * maxBorrowableAmount
     *
     * Get MaxBorrowableAmount
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void marginCrossAccountMaxBorrowableAmountTest() throws ApiException {
        MarginCrossMaxBorrowRequest marginCrossMaxBorrowRequest = new MarginCrossMaxBorrowRequest();
        marginCrossMaxBorrowRequest.setCoin("USDT");
        ApiResponseResultOfMarginCrossMaxBorrowResult response = api.marginCrossAccountMaxBorrowableAmount(marginCrossMaxBorrowRequest);
        assertThat(response).isNotNull();
        assertThat(response.getCode()).isEqualTo(("00000"));
        assertThat(response.getData()).isNotNull();
        assertThat(response.getData().getCoin()).isNotNull();
        assertThat(response.getData().getMaxBorrowableAmount()).isNotNull();
    }

    /**
     * maxTransferOutAmount
     *
     * Get Max TransferOutAmount
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void marginCrossAccountMaxTransferOutAmountTest() throws ApiException {
        String coin = "USDT";
        ApiResponseResultOfMarginCrossAssetsResult response = api.marginCrossAccountMaxTransferOutAmount(coin);
        assertThat(response).isNotNull();
        assertThat(response.getCode()).isEqualTo(("00000"));
        assertThat(response.getData()).isNotNull();
        assertThat(response.getData().getCoin()).isNotNull();
        assertThat(response.getData().getMaxTransferOutAmount()).isNotNull();
    }

    /**
     * repay
     *
     * repay
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void marginCrossAccountRepayTest() throws ApiException {
        MarginCrossRepayRequest marginCrossRepayRequest = new MarginCrossRepayRequest();
        marginCrossRepayRequest.setCoin("USDT");
        marginCrossRepayRequest.setRepayAmount("1");
        ApiResponseResultOfMarginCrossRepayResult response = api.marginCrossAccountRepay(marginCrossRepayRequest);
        assertThat(response).isNotNull();
        assertThat(response.getCode()).isEqualTo(("00000"));
        assertThat(response.getData()).isNotNull();
        assertThat(response.getData().getCoin()).isNotNull();
        assertThat(response.getData().getRepayAmount()).isNotNull();
    }

    /**
     * riskRate
     *
     * riskRate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void marginCrossAccountRiskRateTest() throws ApiException {
        ApiResponseResultOfMarginCrossAssetsRiskResult response = api.marginCrossAccountRiskRate();
        assertThat(response).isNotNull();
        assertThat(response.getCode()).isEqualTo(("00000"));
        assertThat(response.getData()).isNotNull();
        assertThat(response.getData().getRiskRate()).isNotNull();
    }

}
