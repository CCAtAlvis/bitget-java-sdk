/*
 * Bitget Open API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bitget.openapi.api;

import com.bitget.openapi.ApiConfig;
import com.bitget.openapi.ApiException;
import com.bitget.openapi.model.*;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * API tests for P2pMerchantApi
 */
@Disabled
public class P2pMerchantApiTest {

    private final P2pMerchantApi api = new P2pMerchantApi(ApiConfig.getConfig());

    /**
     * advList
     *
     * P2P merchant adv info
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantAdvListTest() throws ApiException {
        String startTime = "1676260773000";
        String endTime = null;
        String status = null;
        String type = null;
        String advNo = null;
        String coin = null;
        String languageType = null;
        String fiat = null;
        String lastMinId = null;
        String pageSize = "1";
        String orderBy = "price";
        ApiResponseResultOfMerchantAdvResult response = api.merchantAdvList(startTime, endTime, status, type, advNo, coin, languageType, fiat, lastMinId, pageSize, orderBy);

        assertThat(response).isNotNull();
        assertThat(response.getCode()).isEqualTo("00000");
        assertThat(response.getMsg()).isEqualTo("success");
        assertThat(response.getData()).isNotNull();
        assertThat(response.getData().getAdvList()).isNotNull();
        for(MerchantAdvInfo item : response.getData().getAdvList()){
            assertThat(item).isNotNull();
            assertThat(item.getAdvId()).isNotBlank();
            assertThat(item.getAdvNo()).isNotBlank();
            assertThat(item.getAmount()).isNotBlank();
            assertThat(item.getStatus()).isNotBlank();
            assertThat(item.getCoin()).isNotBlank();
            assertThat(item.getCoinPrecision()).isNotBlank();
            assertThat(item.getDealAmount()).isNotBlank();
            assertThat(item.getFiatCode()).isNotBlank();
            assertThat(item.getTurnoverNum()).isNotBlank();
        }
    }

    /**
     * merchantInfo
     *
     * P2P merchant info self
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantInfoTest() throws ApiException {
        ApiResponseResultOfMerchantPersonInfo response = api.merchantInfo();

        assertThat(response).isNotNull();
        assertThat(response.getCode()).isEqualTo("00000");
        assertThat(response.getMsg()).isEqualTo("success");
        assertThat(response.getData()).isNotNull();
        assertThat(response.getData().getMerchantId()).isNotBlank();
        assertThat(response.getData().getAveragePayment()).isNotBlank();
        assertThat(response.getData().getEmail()).isNotBlank();
        assertThat(response.getData().getMobile()).isNotBlank();
        assertThat(response.getData().getMobileBindFlag()).isNotNull();
        assertThat(response.getData().getNickName()).isNotBlank();
        assertThat(response.getData().getThirtyBuy()).isNotBlank();
        assertThat(response.getData().getTotalCompletionRate()).isNotBlank();
        assertThat(response.getData().getTotalSell()).isNotBlank();
    }

    /**
     * merchantList
     *
     * P2P merchant list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantListTest() throws ApiException {
        String online = "no";
        String merchantId = null;
        String lastMinId = null;
        String pageSize = "1";
        ApiResponseResultOfMerchantInfoResult response = api.merchantList(online, merchantId, lastMinId, pageSize);

        assertThat(response).isNotNull();
        assertThat(response.getCode()).isEqualTo("00000");
        assertThat(response.getMsg()).isEqualTo("success");
        assertThat(response.getData()).isNotNull();
        assertThat(response.getData().getResultList()).isNotNull();
        for(MerchantInfo item : response.getData().getResultList()){
            assertThat(item).isNotNull();
            assertThat(item.getMerchantId()).isNotBlank();
            assertThat(item.getAveragePayment()).isNotBlank();
            assertThat(item.getThirtyBuy()).isNotBlank();
            assertThat(item.getThirtyCompletionRate()).isNotBlank();
            assertThat(item.getThirtyTrades()).isNotBlank();
            assertThat(item.getTotalTrades()).isNotBlank();
            assertThat(item.getIsOnline()).isNotBlank();
        }
    }

    /**
     * orderList
     *
     * P2P merchant order info
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantOrderListTest() throws ApiException {
        String startTime = "1680598302000";
        String endTime = null;
        String status = null;
        String type = null;
        String advNo = null;
        String orderNo = null;
        String coin = null;
        String languageType = null;
        String fiat = null;
        String lastMinId = null;
        String pageSize = "1";
        ApiResponseResultOfMerchantOrderResult response = api.merchantOrderList(startTime, endTime, status, type, advNo, orderNo, coin, languageType, fiat, lastMinId, pageSize);

        assertThat(response).isNotNull();
        assertThat(response.getCode()).isEqualTo("00000");
        assertThat(response.getMsg()).isEqualTo("success");
        assertThat(response.getData()).isNotNull();
        assertThat(response.getData().getOrderList()).isNotNull();
        for(MerchantOrderInfo item : response.getData().getOrderList()){
            assertThat(item).isNotNull();
            assertThat(item.getOrderId()).isNotBlank();
            assertThat(item.getOrderNo()).isNotBlank();
            assertThat(item.getCoin()).isNotBlank();
            assertThat(item.getStatus()).isNotBlank();
            assertThat(item.getBuyerRealName()).isNotBlank();
            assertThat(item.getSellerRealName()).isNotBlank();
            assertThat(item.getFiat()).isNotBlank();
        }
    }

}
