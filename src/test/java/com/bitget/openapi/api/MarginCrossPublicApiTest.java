/*
 * Bitget Open API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bitget.openapi.api;

import com.bitget.openapi.ApiConfig;
import com.bitget.openapi.ApiException;
import com.bitget.openapi.model.*;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * API tests for MarginCrossPublicApi
 */
public class MarginCrossPublicApiTest {

    private final MarginCrossPublicApi api = new MarginCrossPublicApi(ApiConfig.getConfig());

    /**
     * interestRateAndLimit
     *
     * Get InterestRateAndLimit
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void marginCrossPublicInterestRateAndLimitTest() throws ApiException {
        String coin = "USDT";
        ApiResponseResultOfListOfMarginCrossRateAndLimitResult response = api.marginCrossPublicInterestRateAndLimit(coin);
        assertThat(response).isNotNull();
        assertThat(response.getCode()).isEqualTo(("00000"));
        assertThat(response.getData()).isNotNull();
        for (MarginCrossRateAndLimitResult item : response.getData()) {
            assertThat(item).isNotNull();
            assertThat(item.getBorrowAble()).isNotNull();
            assertThat(item.getCoin()).isNotBlank();
            assertThat(item.getDailyInterestRate()).isNotBlank();
            assertThat(item.getLeverage()).isNotBlank();
            assertThat(item.getMaxBorrowableAmount()).isNotBlank();
            assertThat(item.getTransferInAble()).isNotNull();
            assertThat(item.getYearlyInterestRate()).isNotBlank();
            assertThat(item.getVips()).isNotNull();
            for(MarginCrossVipResult marginCrossVipResult : item.getVips()){
                assertThat(marginCrossVipResult).isNotNull();
                assertThat(marginCrossVipResult.getDailyInterestRate()).isNotNull();
                assertThat(marginCrossVipResult.getYearlyInterestRate()).isNotNull();
                assertThat(marginCrossVipResult.getDiscountRate()).isNotNull();
                assertThat(marginCrossVipResult.getLevel()).isNotNull();
            }
        }
    }

    /**
     * tierData
     *
     * Get TierData
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void marginCrossPublicTierDataTest() throws ApiException {
        String coin = "USDT";
        ApiResponseResultOfListOfMarginCrossLevelResult response = api.marginCrossPublicTierData(coin);
        assertThat(response).isNotNull();
        assertThat(response.getCode()).isEqualTo(("00000"));
        assertThat(response.getData()).isNotNull();
        for(MarginCrossLevelResult item : response.getData()){
            assertThat(item).isNotNull();
            assertThat(item.getCoin()).isNotNull();
            assertThat(item.getLeverage()).isNotBlank();
            assertThat(item.getMaintainMarginRate()).isNotBlank();
            assertThat(item.getMaxBorrowableAmount()).isNotBlank();
            assertThat(item.getTier()).isNotBlank();
        }
    }

}
