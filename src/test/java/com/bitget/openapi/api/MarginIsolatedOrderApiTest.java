/*
 * Bitget Open API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bitget.openapi.api;

import com.bitget.openapi.ApiConfig;
import com.bitget.openapi.ApiException;
import com.bitget.openapi.model.*;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * API tests for MarginIsolatedOrderApi
 */
public class MarginIsolatedOrderApiTest {

    private final MarginIsolatedOrderApi api = new MarginIsolatedOrderApi(ApiConfig.getConfig());

    /**
     * batchCancelOrder
     *
     * Margin Isolated BatchCancelOrder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void marginIsolatedBatchCancelOrderTest() throws ApiException {
        MarginOrderRequest marginOrderRequest = new MarginOrderRequest();
        String clientOid = String.valueOf(System.currentTimeMillis());
        marginOrderRequest.setSymbol("BTCUSDT");
        marginOrderRequest.setSide("buy");
        marginOrderRequest.setOrderType("limit");
        marginOrderRequest.setPrice("17000");
        marginOrderRequest.setTimeInForce("gtc");
        marginOrderRequest.setBaseQuantity("0.01");
        marginOrderRequest.setLoanType("normal");
        marginOrderRequest.setClientOid(clientOid);
        ApiResponseResultOfMarginPlaceOrderResult placeOrderResult = api.marginIsolatedPlaceOrder(marginOrderRequest);
        MarginBatchCancelOrderRequest marginBatchCancelOrderRequest = new MarginBatchCancelOrderRequest();
        marginBatchCancelOrderRequest.setOrderIds(Arrays.asList(placeOrderResult.getData().getOrderId()));
        marginBatchCancelOrderRequest.setSymbol("BTCUSDT");
        ApiResponseResultOfMarginBatchCancelOrderResult response = api.marginIsolatedBatchCancelOrder(marginBatchCancelOrderRequest);
        assertThat(response).isNotNull();
        assertThat(response.getData()).isNotNull();
        for (MarginCancelOrderResult result : response.getData().getResultList()) {
            assertThat(result.getOrderId()).isNotBlank();
        }
    }

    /**
     * batchPlaceOrder
     *
     * Margin Isolated PlaceOrder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void marginIsolatedBatchPlaceOrderTest() throws ApiException {
        MarginBatchOrdersRequest marginOrderRequest = new MarginBatchOrdersRequest();
        marginOrderRequest.setSymbol("BTCUSDT");
        MarginOrderRequest orderRequest = new MarginOrderRequest();
        String clientOid = String.valueOf(System.currentTimeMillis());
        orderRequest.setSide("buy");
        orderRequest.setOrderType("limit");
        orderRequest.setPrice("17000");
        orderRequest.setTimeInForce("gtc");
        orderRequest.setBaseQuantity("0.01");
        orderRequest.setLoanType("normal");
        orderRequest.setClientOid(clientOid);
        marginOrderRequest.setOrderList(Arrays.asList(orderRequest));
        ApiResponseResultOfMarginBatchPlaceOrderResult response = api.marginIsolatedBatchPlaceOrder(marginOrderRequest);
        assertThat(response).isNotNull();
        assertThat(response.getData()).isNotNull();
        assertThat(response.getData().getResultList()).isNotNull();
        for (MarginCancelOrderResult item : response.getData().getResultList()) {
            assertThat(item.getOrderId()).isNotBlank();
            assertThat(item.getClientOid()).isNotBlank();
            assertThat(item.getClientOid()).isEqualTo(clientOid);
        }
    }

    /**
     * cancelOrder
     *
     * Margin Isolated CancelOrder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void marginIsolatedCancelOrderTest() throws ApiException {
        ApiResponseResultOfMarginPlaceOrderResult placeOrderResult = placeOrderByLimit();

        MarginCancelOrderRequest marginCancelOrderRequest = new MarginCancelOrderRequest();
        marginCancelOrderRequest.setSymbol("BTCUSDT");
        marginCancelOrderRequest.setOrderId(placeOrderResult.getData().getOrderId());
        ApiResponseResultOfMarginBatchCancelOrderResult response = api.marginIsolatedCancelOrder(marginCancelOrderRequest);

        assertThat(response).isNotNull();
        assertThat(response.getData()).isNotNull();
        assertThat(response.getData().getResultList()).isNotNull();
        assertThat(response.getData().getResultList().size()).isEqualTo(1);
        assertThat(response.getData().getResultList().get(0).getOrderId()).isEqualTo(placeOrderResult.getData().getOrderId());
    }

    /**
     * fills
     *
     * Margin Isolated Fills
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void marginIsolatedFillsTest() throws ApiException {
        String symbol = "BTCUSDT";
        String startTime = "1679354812000";
        String source = null;
        String endTime = "1680057356760";
        String orderId = null;
        String lastFillId = null;
        String pageSize = "10";
        ApiResponseResultOfMarginTradeDetailInfoResult response = api.marginIsolatedFills(startTime, endTime, symbol, orderId, lastFillId, pageSize);
        assertThat(response).isNotNull();
        assertThat(response.getData()).isNotNull();
        if (response.getData().getFills() != null && response.getData().getFills().size() > 0) {
            for (MarginTradeDetailInfo marginTradeDetailInfo : response.getData().getFills()) {
                assertThat(marginTradeDetailInfo.getOrderId()).isNotBlank();
                assertThat(marginTradeDetailInfo.getSide()).isNotBlank();
                assertThat(marginTradeDetailInfo.getFillId()).isNotBlank();
                assertThat(marginTradeDetailInfo.getFillPrice()).isNotBlank();
                assertThat(marginTradeDetailInfo.getFillQuantity()).isNotBlank();
                assertThat(marginTradeDetailInfo.getFillTotalAmount()).isNotBlank();
                assertThat(marginTradeDetailInfo.getOrderType()).isNotBlank();
            }
        }
    }

    /**
     * history
     *
     * Margin Isolated historyOrders
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void marginIsolatedHistoryOrdersTest() throws ApiException {
        String startTime = String.valueOf(System.currentTimeMillis() - 5 * 24 * 60 * 60 * 1000L);
        String symbol = "BTCUSDT";
        String source = null;
        String endTime = "1680154960627";
        String orderId = null;
        String clientOid = null;
        String minId = null;
        String pageSize = null;
        ApiResponseResultOfMarginOpenOrderInfoResult response = api.marginIsolatedHistoryOrders(startTime, symbol, source, endTime, orderId, clientOid, pageSize, minId);

        assertThat(response).isNotNull();
        assertThat(response.getData()).isNotNull();
        assertThat(response.getData().getOrderList()).isNotNull();
        for (MarginOrderInfo item : response.getData().getOrderList()) {
            assertThat(item).isNotNull();
            assertThat(item.getSymbol()).isEqualTo("BTCUSDT");
            assertThat(item.getOrderId()).isNotBlank();
            assertThat(item.getOrderType()).isNotBlank();
            assertThat(item.getBaseQuantity()).isNotBlank();
            assertThat(item.getFillPrice()).isNotBlank();
            assertThat(item.getFillQuantity()).isNotBlank();
            assertThat(item.getFillTotalAmount()).isNotBlank();
            assertThat(item.getLoanType()).isNotBlank();
            assertThat(item.getPrice()).isNotBlank();
            assertThat(item.getQuoteAmount()).isNotBlank();
            assertThat(item.getSide()).isNotBlank();
            assertThat(item.getSource()).isNotBlank();
            assertThat(item.getStatus()).isNotBlank();
        }
    }

    /**
     * openOrders
     *
     * Margin Isolated openOrders
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void marginIsolatedOpenOrdersTest() throws ApiException {
        String startTime = String.valueOf(System.currentTimeMillis() - 5 * 24 * 60 * 60 * 1000L);
        String symbol = "BTCUSDT";
        String endTime = String.valueOf(System.currentTimeMillis());
        String orderId = null;
        String clientOid = null;
        String pageSize = null;
        ApiResponseResultOfMarginOpenOrderInfoResult response = api.marginIsolatedOpenOrders(startTime, endTime, symbol, orderId, clientOid, pageSize);

        assertThat(response).isNotNull();
        assertThat(response.getData()).isNotNull();
        assertThat(response.getData().getOrderList()).isNotNull();
        for (MarginOrderInfo item : response.getData().getOrderList()) {
            assertThat(item).isNotNull();
            assertThat(item.getSymbol()).isEqualTo("BTCUSDT");
            assertThat(item.getOrderId()).isNotBlank();
            assertThat(item.getOrderType()).isNotBlank();
            assertThat(item.getBaseQuantity()).isNotBlank();
            assertThat(item.getFillPrice()).isNotBlank();
            assertThat(item.getFillQuantity()).isNotBlank();
            assertThat(item.getFillTotalAmount()).isNotBlank();
            assertThat(item.getLoanType()).isNotBlank();
            assertThat(item.getPrice()).isNotBlank();
            assertThat(item.getQuoteAmount()).isNotBlank();
            assertThat(item.getSide()).isNotBlank();
            assertThat(item.getSource()).isNotBlank();
            assertThat(item.getStatus()).isNotBlank();
        }
    }

    /**
     * placeOrder
     *
     * Margin Isolated PlaceOrder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void marginIsolatedPlaceOrderTest() throws ApiException {
        placeOrderByLimit();
    }

    private ApiResponseResultOfMarginPlaceOrderResult placeOrderByLimit() throws ApiException {
        String clientOid = String.valueOf(System.currentTimeMillis());
        MarginOrderRequest marginOrderRequest = new MarginOrderRequest();
        marginOrderRequest.setSymbol("BTCUSDT");
        marginOrderRequest.setSide("buy");
        marginOrderRequest.setOrderType("limit");
        marginOrderRequest.setPrice("1600");
        marginOrderRequest.setTimeInForce("gtc");
        marginOrderRequest.setQuoteAmount("1000");
        marginOrderRequest.setBaseQuantity("0.625");
        marginOrderRequest.setLoanType("normal");
        marginOrderRequest.setClientOid(clientOid);
        ApiResponseResultOfMarginPlaceOrderResult placeOrderResult = api.marginIsolatedPlaceOrder(marginOrderRequest);

        assertThat(placeOrderResult).isNotNull();
        assertThat(placeOrderResult.getCode()).isEqualTo("00000");
        assertThat(placeOrderResult.getMsg()).isEqualTo("success");
        assertThat(placeOrderResult.getData()).isNotNull();
        assertThat(placeOrderResult.getData().getOrderId()).isNotNull();
        assertThat(placeOrderResult.getData().getClientOid()).isEqualTo(clientOid);

        return placeOrderResult;
    }
}
